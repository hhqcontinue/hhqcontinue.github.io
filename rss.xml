<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hoohack&#39;s Blog</title>
  <subtitle>Hoohack is blogging about life, tech and reading.</subtitle>
  <link href="https://hoohack.me/rss.xml" rel="self"/>
  <link href="https://hoohack.me/"/>
  <updated>2020-09-19T00:00:00Z</updated>
  <id>https://hoohack.me/</id>
  <author>
    <name>Hoohack</name>
  </author>
  
  <entry>
    <title>你附近的人都有谁，这个功能是怎么实现的？</title>
    <link href="https://hoohack.me/blog/2020-09-19-using-redis-geo-find-nearby/"/>
    <updated>2020-09-19T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-09-19-using-redis-geo-find-nearby/</id>
    <content type="html">&lt;p&gt;手机上很多软件都有附近的人的功能，比如微信的“附近的人”，美团的“附近的餐厅”等等，那么这些功能可以怎么实现呢？&lt;/p&gt;
&lt;h2 id=&quot;redis%E4%B8%AD%E7%9A%84geo%E5%91%BD%E4%BB%A4&quot; tabindex=&quot;-1&quot;&gt;Redis中的Geo命令&lt;/h2&gt;
&lt;p&gt;在Redis在3.2版本新增了一个功能，就是GEO（地理位置），这个GEO功能总共有6个函数，分别为：&lt;/p&gt;
&lt;p&gt;GEOADD：添加指定的地理位置坐标值到指定的key中，可以同时添加多个。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;GEOADD location-set longitude latitude name [longitude latitude name ...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;GEODIST：计算两个给定位置之间的距离，可指定距离的单位，默认是米。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;GEODIST location-set location-x location-y [unit]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;GEOHASH：获取地理位置的geohash值。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;GEOHASH key member [member …]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;GEOPOS：指定key和member，返回所有指定名称的位置&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;GEOPOS location-set name [name ...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;GEORADIUS：给定经纬度信息，以给定的经纬度为中心，查询与中心位置距离不超过给定最大距离(radius)的所有地理位置元素。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;GEORADIUS location-set longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [ASC|DESC] [COUNT count]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;GEORADIUSBYMEMBER：与&lt;code&gt;GEORADIUS&lt;/code&gt;命令类似，给定中心位置，查询附近的地理位置元素，与&lt;code&gt;GEORADIUS&lt;/code&gt;命令不同的是，这个命令的中心点是某个成员，是从用户的维度来查询。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;GEORADIUSBYMEMBER location-set location radius m|km|ft|mi [WITHCOORD] [WITHDIST] [ASC|DESC] [COUNT count]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更详细的参数说明可参考&lt;a href=&quot;https://redis.io/commands#geo&quot;&gt;redis文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;实现附近的人等方法就是通过&lt;code&gt;GEOADD&lt;/code&gt;将多个用户的地理位置坐标保存到Redis，使用&lt;code&gt;GEORADIUS&lt;/code&gt;就可以获得某个中心点指定范围内附近的人的所有地理位置元素及距离等信息。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B&quot; tabindex=&quot;-1&quot;&gt;使用示例&lt;/h2&gt;
&lt;p&gt;来看看具体是怎么使用的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用GEOADD添加地理位置坐标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/geoadd.jpg&quot; alt=&quot;geoadd&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用GEORADIUS查找附近的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/georadius.jpg&quot; alt=&quot;georadius&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用GEORADIUSBYMEMBER查找附近的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/georadiusbymember.jpg&quot; alt=&quot;georadiusbymember&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9&quot; tabindex=&quot;-1&quot;&gt;使用注意事项&lt;/h2&gt;
&lt;p&gt;1、异常&lt;/p&gt;
&lt;p&gt;注意在Java应用代码中调用georadius和georadiusbymember这两个指令，在没有数据的时候，会抛异常&lt;code&gt; redis.clients.jedis.exceptions.JedisDataException&lt;/code&gt;，所以在使用这个命令的时候，需要对方法进行try...catch...，或者自己封装一层，如果没有数据或者异常的时候返回空的数据。&lt;/p&gt;
&lt;p&gt;2、如何删除单个用户的位置数据&lt;/p&gt;
&lt;p&gt;Redis的Geo只提供了六个命令，没有提供删除地理位置的指令，而Redis-geo的底层数据结构是ZSET，因此可以通过ZREM命令来删除某个成员的位置元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/zrem-geo.jpg&quot; alt=&quot;zrem-geo&quot; /&gt;&lt;/p&gt;
&lt;p&gt;3、单位&lt;/p&gt;
&lt;p&gt;查询出来的距离单位，就是查询时指定的单位，比如查询时指定了km，那么距离的单位就是km。&lt;/p&gt;
&lt;p&gt;4、经纬度1度的跨度是多少&lt;/p&gt;
&lt;p&gt;在经线上，纬度每差1度,实地距离大约为111千米&lt;/p&gt;
&lt;p&gt;在纬线上，经度每差1度,实际距离为111×cosθ千米。（其中θ表示该纬线的纬度.在不同纬线上,经度每差1度的实际距离是不相等的）。&lt;/p&gt;
&lt;p&gt;在生成测试数据时需要注意这一点，如果随便生成数据，在查询时可能会找不到。&lt;/p&gt;
&lt;p&gt;到这里为止，在Redis中使用geohash来实现附近功能的使用就介绍完了，使用起来就是这么简单，如果只是为了使用，看到这里就够了。如果你还想了解一下geohash的原理，那么请继续往下看。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&quot; tabindex=&quot;-1&quot;&gt;实现原理&lt;/h2&gt;
&lt;p&gt;Redis的Geo功能底层使用的数据结构是ZSET，算法是geohash算法。&lt;/p&gt;
&lt;h3 id=&quot;z%E9%98%B6%E6%9B%B2%E7%BA%BF&quot; tabindex=&quot;-1&quot;&gt;Z阶曲线&lt;/h3&gt;
&lt;p&gt;Z阶曲线如下所示，曲线看起来比较清晰，生成一个Z阶曲线只需要把每个Z的首尾相连即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/Z-line.jpg&quot; alt=&quot;Z-line&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;geohash%E6%8F%8F%E8%BF%B0&quot; tabindex=&quot;-1&quot;&gt;Geohash描述&lt;/h3&gt;
&lt;p&gt;Geohash是一种位置编码算法，它是基于&lt;a href=&quot;https://en.wikipedia.org/wiki/Z-order_curve&quot;&gt;Z阶曲线&lt;/a&gt;，把空间区域分割为多个网格/桶来存储，Geohash对地理位置编码后保存到字符串中。&lt;/p&gt;
&lt;p&gt;Geohash保证，如果编码得到的字符串的共同前缀长度越长，两点之间的距离就越近，但是反过来是不保证的，两个很接近的点，可以有不同的/很少的共同字符串前缀。嗯，这是一个充分不必要条件。&lt;/p&gt;
&lt;p&gt;简单的理解，Geohash就是将每一个经纬度的位置信息进行编码后得到编码字符串保存，而编码字符串相似的点，表示距离相近（也有特殊的情况），因此当根据某个中心点查找附近的人时，可以使用字符串前缀匹配算法来查找附近的人的位置信息。&lt;/p&gt;
&lt;h3 id=&quot;geohash%E7%89%B9%E7%82%B9%E4%B8%8E%E5%A5%BD%E5%A4%84&quot; tabindex=&quot;-1&quot;&gt;Geohash特点与好处&lt;/h3&gt;
&lt;p&gt;Geohash有两个特点：&lt;/p&gt;
&lt;p&gt;1、对于每一个位置，都有唯一的Geohash编码&lt;/p&gt;
&lt;p&gt;2、Geohash可以用来做地理标记&lt;/p&gt;
&lt;p&gt;在数据库中使用geohash编码保存位置信息还有两个好处：&lt;/p&gt;
&lt;p&gt;1、使用geohash来做索引，查询时会非常快&lt;/p&gt;
&lt;p&gt;2、geohash的索引可以实现非常快的临近点搜索，因为越接近的点，所在的索引范围越小&lt;/p&gt;
&lt;h3 id=&quot;geohassh%E7%BC%96%E7%A0%81&quot; tabindex=&quot;-1&quot;&gt;Geohassh编码&lt;/h3&gt;
&lt;p&gt;在进行编码时，geohash使用“二分逼近法”来得到经纬度的二进制，经度的范围是[-180,180]，纬度的范围是[-90,90]，编码过程如下：&lt;/p&gt;
&lt;p&gt;1、将区间以中位数一分为二得到左右区间，如果数值比中位数大，则落在右区间，得到编码1，否则落到左区间，得到编码0&lt;/p&gt;
&lt;p&gt;2、从第一步得到的新区间，继续将区间以中位数一分为二得到新的左右区间，继续判断数值的范围，如果数值比中位数大，则落在右区间，得到编码1，否则得到编码0&lt;/p&gt;
&lt;p&gt;3、递归执行上述的过程，不断逼近所求数值，直到得到所要的长度&lt;/p&gt;
&lt;p&gt;通过二分法不断逼近目标值获得0/1来得到某个数值的二进制编码，而编码的长度与要求的精度有关，长度与精度的对应关系见下表：&lt;/p&gt;
&lt;p&gt;| geohash length | 	lat bits	| lng bits	| lat error	| lng error	| km error |
| :----: |   :----:   |   :----:  |  :----:  |  :----:  |  :----:  |  :----:  |  :----:  |
| 1 | 2 | 3 | ±23 | ±23 | ±2500 |
| 2 | 5	| 5 | ±2.8 | ±5.6 | ±630 |
| 3	| 7	| 8 | ±0.70 | ±0.70 | ±78 |
| 4	| 10 | 10 | ±0.087 | ±0.18 | ±20 |
| 5	| 12 | 13 | ±0.022 | ±0.022 | ±2.4 |
| 6	| 15 | 15 | ±0.0027 | ±0.0055 | ±0.61 |
| 7	| 17 | 18 | ±0.00068 | ±0.00068 | ±0.076 |
| 8	| 20 | 20 | ±0.000085 | ±0.00017 | ±0.019 |&lt;/p&gt;
&lt;h3 id=&quot;%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B%E7%A4%BA%E4%BE%8B&quot; tabindex=&quot;-1&quot;&gt;编码过程示例&lt;/h3&gt;
&lt;p&gt;以经纬度(23.157 113.273)为例子，二进制编码长度取10位，编码过程如下：&lt;/p&gt;
&lt;p&gt;纬度：23.157&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;编码&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;左区间&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;中位数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;右区间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-90&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;33.75&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;28.125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;33.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;25.3125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;28.125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23.90625&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;25.3125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23.203125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23.90625&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.8515625&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23.203125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22.8515625&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23.0273438&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23.203125&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;得到编码序列：1010000011&lt;/p&gt;
&lt;p&gt;经度：113.273&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;编码&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;左区间&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;中位数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;右区间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-180&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;135&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;135&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;123.75&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;135&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;118.125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;123.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;115.3125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;118.125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113.90625&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;115.3125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113.203125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113.90625&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113.203125&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113.554688&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;113.90625&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;得到编码序列：1101000001&lt;/p&gt;
&lt;h3 id=&quot;%E7%BC%96%E7%A0%81%E7%BB%84%E5%90%88&quot; tabindex=&quot;-1&quot;&gt;编码组合&lt;/h3&gt;
&lt;p&gt;经过计算，纬度的编码序列：1010000011，经度的编码序列：1101000001。&lt;/p&gt;
&lt;p&gt;编码后得到的经纬度二进制再进行重新组合，每一个经纬度都是一组数据，纬度放奇数位，经度保存在偶数位，从左到右，下标从0开始，组合后的编码序列：11100 11000 00000 00111，转化为十进制后，分别是28 24 0 13，根据Geohas使用的Base32编码，得到的编码字符串是ws0e。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/base32.png&quot; alt=&quot;base32&quot; /&gt;&lt;/p&gt;
&lt;p&gt;验证编码结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/geohash.jpg&quot; alt=&quot;geohash&quot; /&gt;&lt;/p&gt;
&lt;p&gt;至于为什么要把经纬度分别安排在奇数和偶数位，前面提到，Geohash是基于Z阶曲线实现的，如下图所示，Z阶曲线实现中，空间被划分为多个网格，x 轴就是纬度，y轴就是经度。经度放偶数位，纬度放奇数位就是这样而来的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/z-line-grid.jpg&quot; alt=&quot;z-line-grid&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;redis%E4%B8%AD%E6%9F%A5%E6%89%BE%E8%B7%9D%E7%A6%BB&quot; tabindex=&quot;-1&quot;&gt;Redis中查找距离&lt;/h2&gt;
&lt;p&gt;进行了编码和数据存储之后，就可以查询中心点附近的地理位置。&lt;/p&gt;
&lt;p&gt;在Redis中的实现代码这里不展开了，有兴趣的可参考这份代码注释：&lt;a href=&quot;https://blog.huangz.me/diary/2015/annotated-redis-geo-source.html&quot;&gt;https://blog.huangz.me/diary/2015/annotated-redis-geo-source.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单的说，是这样的：&lt;/p&gt;
&lt;p&gt;1、添加的地理位置数据底层使用跳跃表保存&lt;/p&gt;
&lt;p&gt;2、利用输入的中心点和输入半径确定待搜索的区域范围对象。这个范围对象包含了满足条件的经度以及对应的能覆盖目标区域的九宫格区域（目标是为了查询八个方向，四面八方）&lt;/p&gt;
&lt;p&gt;3、遍历九宫格，根据每个geohash网格的范围框选出位置对象，最终找到满足条件的对象&lt;/p&gt;
&lt;p&gt;以上，就是本次要介绍的内容，从实践和原理上分析了geohash算法实现距离查找的功能，了解了原理，使用起来就更加随心应手。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Geohash&quot;&gt;https://en.wikipedia.org/wiki/Geohash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://halfrost.com/go_spatial_search/&quot;&gt;https://halfrost.com/go_spatial_search/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/LBSer/p/3310455.html&quot;&gt;https://www.cnblogs.com/LBSer/p/3310455.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://redis.io/commands#geo&quot;&gt;https://redis.io/commands#geo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Z-order_curve&quot;&gt;https://en.wikipedia.org/wiki/Z-order_curve&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.huangz.me/diary/2015/annotated-redis-geo-source.html&quot;&gt;https://blog.huangz.me/diary/2015/annotated-redis-geo-source.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000020977911&quot;&gt;https://segmentfault.com/a/1190000020977911&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，麻烦顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>你真的知道什么是线程安全吗？</title>
    <link href="https://hoohack.me/blog/2020-09-01-what-is-thread-safe/"/>
    <updated>2020-09-01T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-09-01-what-is-thread-safe/</id>
    <content type="html">&lt;p&gt;如果面试官问你，线程安全的类有哪些，究竟什么是线程安全？你怎么回答呢？我们整天说线程安全，但你真的知道什么是线程安全吗？&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;什么是进程&lt;/h2&gt;
&lt;p&gt;从学术上理解，进程就是&lt;code&gt;包含上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;另一个简单的理解，进程就是程序的一次执行，比如看看一下这个图，每一个运行中的程序就是一个独立的进程，进程是相互独立存在的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/09/mac-monitor.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;什么是线程&lt;/h2&gt;
&lt;p&gt;线程就是CPU执行那一部分的一个个小段，线程是CPU的基本调度单位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：平时大家说“因为Redis是单线程的，所以它是原子性的”，根本原因是，因为线程是CPU的最小调度单元，CPU每次只能执行成功或者失败才调度切换到下一个线程，所以Redis的操作都是原子的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。&lt;/p&gt;
&lt;h2 id=&quot;%E5%A0%86%E5%92%8C%E6%A0%88&quot; tabindex=&quot;-1&quot;&gt;堆和栈&lt;/h2&gt;
&lt;p&gt;进程与线程中比较重要的内存区域有堆和栈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;是进程和线程共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是用完了要还给操作系统，要不然就是内存泄漏。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Java中，堆是Java虚拟机所管理的内存中最大的一块，是所有线程共享的一块内存区域，在虚拟机启动时创建。堆所存在的内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;栈&lt;/strong&gt;是每个线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是线程安全的。操作系统在切换线程的时候会自动切换栈。栈空间不需要在高级语言里面显式的分配和释放。&lt;/p&gt;
&lt;h2 id=&quot;%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE&quot; tabindex=&quot;-1&quot;&gt;进程和线程中的数据&lt;/h2&gt;
&lt;p&gt;程序几乎都需要与数据打交道，读取数据（命令行参数，文件），写入数据（设置变量，写入文件）。这些数据是保存在进程所管理的内存里。&lt;/p&gt;
&lt;p&gt;为了保证数据的安全，比如一个进程中修改的数据不会影响到另一个进程的数据，每一个进程都会拥有操作系统分配给自己的内存空间，而不能访问其他进程的数据，这一点是由操作系统保证的。&lt;/p&gt;
&lt;p&gt;进程占有的资源：地址空间，全局变量，打开的文件，子进程，信号量，账户信息&lt;/p&gt;
&lt;p&gt;线程占有的资源：栈，寄存器，状态，程序计数器&lt;/p&gt;
&lt;p&gt;进程是操作系统进行资源分配和调度的一个独立单位，不会共享资源，通过进程间通信共享资源，而线程可以共享部分资源，独自占有的资源不共享。&lt;/p&gt;
&lt;p&gt;线程间共享的数据包括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、堆&lt;/li&gt;
&lt;li&gt;2、进程代码段&lt;/li&gt;
&lt;li&gt;3、进程的公有数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于线程间共享的内存区域，如果进程中的A线程操作了数据，切换到B线程执行，修改了同样的数据，回到A线程时，数据就不是A线程切换时候的样子，这样一来，数据就被污染了，我们就说这块数据在多线程环境下是不安全的，即线程不安全的。&lt;/p&gt;
&lt;p&gt;这就是线程安全这个概念产生的背景，笔者认为，谈论线程安全性，一定需要先介绍操作系统中进程与线程操作内存的过程，否则，说一个对象是安全的还是不安全的就显得有点突兀，而且相对于什么是安全的也不知道。&lt;/p&gt;
&lt;h2 id=&quot;%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7&quot; tabindex=&quot;-1&quot;&gt;线程安全性&lt;/h2&gt;
&lt;p&gt;《Java并发编程实战》给出的定义如下：
一个对象是否需要是线程安全的，取决于它是否被多个线程访问。这只和对象在程序中是以何种方式被使用的有关，和对象本身具体是做什么的无关。&lt;/p&gt;
&lt;p&gt;当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。&lt;/p&gt;
&lt;p&gt;线程安全的程序不一定是由线程安全的类组成，完全由线程安全类组成的程序也不一定是线程安全的。还需要一定的组合技巧才能保证线程安全。&lt;/p&gt;
&lt;p&gt;要编写线程安全的代码，其核心在于要对对象状态访问操作进行管理，特别是对共享的（Shared）和可变的（Mutable）状态的访问，即数据的访问，而数据是存储在内存中，也就是说，线程安全的本质不是代码在线程中的安全，而是线程中内存的安全。&lt;/p&gt;
&lt;p&gt;至此，线程安全的概念介绍完毕，&lt;strong&gt;最后的最后，你知道有哪些方法可以保证线程安全吗？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;分享一个学习方法，带着问题去看书。有时候看一本书，从头到尾看完确实非常枯燥无味，且很容易就放弃了，最近想到一个方法就是带着问题去看，比如《Java并发编程实战》，据说是Java并发编程的神书，但是很枯燥，而且中文版也难懂，看了好多次之后没能进入状态，后来就想着，能不能去网上看看一些面试题，看看这本书究竟能给我解答什么疑惑，怀着这样的心情，就把前三章看完了。&lt;/p&gt;
&lt;p&gt;带着问题去看，目的性较强，更容易去理解，再通过自己的语言描述出来，印象就更深刻了。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，麻烦顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Java项目如何分层</title>
    <link href="https://hoohack.me/blog/2020-08-07-how-java-project-stratify/"/>
    <updated>2020-08-07T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-08-07-how-java-project-stratify/</id>
    <content type="html">&lt;p&gt;在现在的Java项目中的项目分层，大多数都是简单的Controller、Service、Dao三层，看起来非常简单。&lt;/p&gt;
&lt;p&gt;但是，随着代码越写越多，写久了以后，渐渐发现其实并没有把他们真正的职责区分开来，大多数情况下，Controller只是简单的调用Service中的方法，然后就返回；Service之间组合起来处理业务逻辑，甚至有时候Service页只是Dao层的一次简单透传转发。在项目庞大，追求快速发展的情况下，往往不会过于在乎这些细节，所以大部分人都觉得无所谓了，能用就行，久而久之，层级关系逐渐混乱，维护起来就会觉得挺头疼，而且后续如果要扩展业务功能的时候也无法复用。&lt;/p&gt;
&lt;p&gt;在很多人眼里，分层这个都无所谓的，新建一个项目的时候都是从一个项目拷过来，反正能运行就行，大家都是这么写，我也这么写就好了，先跑起来再说。&lt;/p&gt;
&lt;p&gt;然而每个人的习惯都不一样，有的人习惯在Controller中写一大堆业务逻辑，有的人习惯在Controller里返回Service层的调用，去改别人代码的时候就会很纠结，究竟使用什么风格好呢？特别是一些其他语言转过来的新手往往会疑惑，究竟Controller、Service、Dao这些的区别是什么？应该怎么布局代码呢？当看到代码里的Service大部分都是Dao的封装，就会觉得在Controller里面调用各个Service的方法来处理业务逻辑也是没毛病的。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人不会觉得任何一种做法有任何问题的，以笔者自己亲身经历而言，项目要快速发展或者开发压力较大的情况下，绝对不会反对，也不会嘲笑任何一种做法，但是等到项目稍微稳定或者有时间停下来思考的时候，可以认真思考一下各个层之间的职责和关系，制定一个约定俗成的风格，大家遵循这种风格开发。个人认为风格是没有绝对的好与坏，只要团队里大家统一，那就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;讲了那么多文字，先来点代码更实际一点。以笔者个人比较倾向使用的应用分层，通过以下代码示例来介绍一个好的分层应该是怎么样的。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B&quot; tabindex=&quot;-1&quot;&gt;代码示例&lt;/h2&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestController&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserService&lt;/span&gt; userService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Parameter&lt;/span&gt; parameter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        parameter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;validateArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; userService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserManager&lt;/span&gt; userManager&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserInfoDTO&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;userManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isExists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; userManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserManager&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserDao&lt;/span&gt; userDao&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserInfoDTO&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;UserDO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; userDO &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ofNullable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userDao&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;queryUserById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; userDO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ifPresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserInfoDTO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exception, {}, &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; userDao&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;countUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exception, {}, &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SELECT count(*) FROM t_user WHERE userId = #{userId}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;countUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SELECT * FROM t_user WHERE userId = #{userId}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;UserDO&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;queryUserById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E9%98%BF%E9%87%8C%E8%A7%84%E8%8C%83&quot; tabindex=&quot;-1&quot;&gt;阿里规范&lt;/h2&gt;
&lt;p&gt;在互联网里，阿里在Java领域还是比较权威，所以笔者参考的是阿里分层规范，规范如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/08/alibaba-project-stratify.jpg&quot; alt=&quot;阿里项目分层规范&quot; /&gt;&lt;/p&gt;
&lt;p&gt;开放接口层:可直接封装Service接口暴露成RPC接口;通过Web封装成http接口;网关控制层等。&lt;/p&gt;
&lt;p&gt;终端显示层:各个端的模板渲染并执行显示层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示层等。&lt;/p&gt;
&lt;p&gt;Web层:主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。&lt;/p&gt;
&lt;p&gt;Service 层:相对具体的业务逻辑服务层。&lt;/p&gt;
&lt;p&gt;Manager 层:通用业务处理层，它有如下特征:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对第三方平台封装的层，预处理返回结果及转化异常信息;&lt;/li&gt;
&lt;li&gt;对Service层通用能力的下沉，如缓存方案、中间件通用处理;&lt;/li&gt;
&lt;li&gt;与DAO层交互，对DAO的业务通用能力的封装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;DAO 层:数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。&lt;/p&gt;
&lt;p&gt;外部接口或第三方平台:包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。&lt;/p&gt;
&lt;p&gt;以上图文来自于阿里开发手册，而笔者个人的理解是这样的：&lt;/p&gt;
&lt;p&gt;Web层，就是Http的Controller/Thrift的TService层，主要是暴露给前端/内部部门的接口，里面做的是访问控制的转发，完成基本的参数校验，token校验等等，不做任何业务逻辑处理。&lt;/p&gt;
&lt;p&gt;Service层，处理具体的业务逻辑，通常是一个功能/接口对应一个Controller，Controller调用Service的业务方法。&lt;/p&gt;
&lt;p&gt;Manager层，对所有需要RPC调用的封装，包括但不限于内部接口调用、Dao调用、Redis调用，以及上述调用的异常封装、数据转换；这一层是最适合做复用逻辑抽象的，其他Service也可以调用封装好的Manager。&lt;/p&gt;
&lt;p&gt;Dao层，封装数据库层，映射到DB的表和实体类。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%86%E5%B1%82%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2&quot; tabindex=&quot;-1&quot;&gt;分层领域模型的转换&lt;/h2&gt;
&lt;p&gt;阿里规范文档还给了领域模型规范的参考：&lt;/p&gt;
&lt;p&gt;DO(Data Object):与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。&lt;/p&gt;
&lt;p&gt;DTO(Data Transfer Object):数据传输对象，Service 和 Manager 向外传输的对象。&lt;/p&gt;
&lt;p&gt;BO(Business Object):业务对象。可以由 Service 层输出的封装业务逻辑的对象。&lt;/p&gt;
&lt;p&gt;QUERY:数据查询对象，各层接收上层的查询请求。注:超过 2 个参数的查询封装，禁止 使用 Map 类来传输。&lt;/p&gt;
&lt;p&gt;VO(View Object):显示层对象，通常是 Web 向模板渲染引擎层传输的对象。&lt;/p&gt;
&lt;p&gt;规范并不一定是全对的，如果按照上面的数据模型操作，那么数据从数据库读取出来到真正展示到接口层，将经历3-4次的数据实体转换，而这些转换大多是重复的，甚至还会因为漏掉设置某个属性而出现意想不到的bug。所以还是具体情况具体分析，有一条基本原则就是&lt;strong&gt;Controller/TService与Dao的数据不能直接互传&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上就是本文要介绍的内容，对于业务发展比较稳定的团队，或者没有任何历史代码的团队，项目的分层还是很有必要的，对于之后代码的可维护性及复用性都有很大的帮助。&lt;/p&gt;
&lt;p&gt;另外，再次重申，所有的风格都没有绝对的好与坏，只要适合团队，统一使用，那就是好的风格。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，麻烦顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Raft探索历程--Part2</title>
    <link href="https://hoohack.me/blog/2020-07-04-exploring-raft-part-2/"/>
    <updated>2020-07-04T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-07-04-exploring-raft-part-2/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;声明：本系列文章面向的读者需要看过Raft论文或者对Raft有一定的了解，如果没有看过论文或者不了解Raft，建议先去学习后再来看，否则会比较难懂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;紧接着&lt;a href=&quot;https://www.hoohack.me/2020/06/21/exploring-raft-part-one&quot;&gt;上一篇&lt;/a&gt;的内容，继续探索Raft的leader选举、日志复制、安全性等等实现细节。&lt;/p&gt;
&lt;h2 id=&quot;raft%E5%9F%BA%E7%A1%80&quot; tabindex=&quot;-1&quot;&gt;Raft基础&lt;/h2&gt;
&lt;p&gt;一个Raft集群通常包含多个机器，比较普遍的Raft集群组成是2F+1，F代表的是可以发生失败的机器数量。比如集群有5台机器，那么Raft只能容忍两台服务失败，如果三台服务不能工作了，那么整个集群也就失败了。大多数Raft集群的机器数量都是5个。&lt;/p&gt;
&lt;p&gt;每台机器都有三个状态：leader、follower、candidate，如下图所示，就是三种状态之间的转换图。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/07/raft-state-exchange.jpg&quot; alt=&quot;Raft三种状态转换图&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;leader接收所有的请求，如果client请求到了follower，那么follower会将请求转发到leader&lt;/li&gt;
&lt;li&gt;follower只是接收来自leader和candidate的请求，不会主动发起请求。如果follower没有收到任何通信或信号，转变为candidate，然后重新进行一轮新的选举&lt;/li&gt;
&lt;li&gt;candidate，是在选举新leader时出现的状态，如果candidate收到来自大多数机器的投票请求(RequestVote RPC，以下称为RequestVote请求)，就会转变为leader&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Raft把时间按照term划分，每个term以一次选举开始，如果某一个candidate成为新的leader后，就进入正常运行阶段，如果没有选举出新的leader，那么就再次进行一次新的选举，这时候又是一个新的term。简单地说，在Raft中，是以term做时间单位。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/07/raft-time-unit.jpg&quot; alt=&quot;Raft时间单位&quot; /&gt;&lt;/p&gt;
&lt;p&gt;每一个服务器都会保存当前的term序号，当前的term序号会在服务器通信之间传递。如果服务器收到的请求包含了旧的term，服务器会拒绝该请求。&lt;/p&gt;
&lt;h2 id=&quot;leader%E9%80%89%E4%B8%BE&quot; tabindex=&quot;-1&quot;&gt;leader选举&lt;/h2&gt;
&lt;p&gt;再来看看Raft是如何进行leader选举的，Raft使用心跳机制来触发leader选举。当服务器启动的时候，初始状态是follower，leader发送心跳的方式是发起一个不包含日志条目的AppendEntries RPC（以下称为Append请求）到所有的follower，follower收到来自leader的心跳请求包，说明leader还在&amp;quot;存活&amp;quot;着，如果长时间没有收到leader的心跳，那么follower就会认为当前没有leader，转为candidate，然后发起一次新的leader选举。&lt;/p&gt;
&lt;p&gt;当leader选举开始时，follower会将当前的term自增，随后马上进入candidate状态，并发起一次RequestVote请求到所有机器，请求其他机器对它进行投票。Raft集群中的服务器在一个term里，除了投给自己之外，只能投票给一个candidate。&lt;/p&gt;
&lt;p&gt;如果有以下三种情况发生，candidate的状态就会发生转变：
1、candidate获得大多数服务器的投票，成为leader，此时leader会马上发出心跳消息包，通知其他机器它成为了leader
2、candidate收到来自其他机器的心跳消息包，且该心跳包含的term大于当前candidate的term，说明已经有新的leader产生，candidate转为follwoer。（如果心跳包含的term小于当前candidate的term，candidate会直接忽略该心跳）。
3、所有的candidate在一段时间内都没能成功获得大多数投票，该次选举被认为超时，candidate会重新进行一次选举。但是如果没有其他的限制，多个follower同时成为candidate，candidate就会同时发出RequestVote请求，投票就会被分散到多个candidate上，因此没有candidate赢得选举，选举超时，再发起一次选举又是相同的结果，就会进入一个超时导致没有leader的死循环。&lt;/p&gt;
&lt;p&gt;为了解决第三种情况，Raft用了随机超时时间来确保投票分散的情况不会发生。随机超时时间的意思就是，Raft的超时时间是在一个区间（如150-300ms）里面选择，而不是固定的一个时间单位。这样一来，大部分情况下就只有一个服务器会超时。另外，在超时之后，Raft使用随机时间来启动一次新的选举，这样就不会出现所有的candidate同时开始重新选举而导致进入选举超时的死循环。&lt;/p&gt;
&lt;p&gt;这个随机超时时间机制简单且有效地解决这个死循环的问题。&lt;/p&gt;
&lt;h2 id=&quot;%E6%97%A5%E5%BF%97%E5%A4%8D%E5%88%B6&quot; tabindex=&quot;-1&quot;&gt;日志复制&lt;/h2&gt;
&lt;p&gt;Raft是保证分布式系统数据一致性的协议，主要的工作就是接收客户端的数据，并同步数据，保证所有节点的数据一致。&lt;/p&gt;
&lt;h3 id=&quot;%E6%97%A5%E5%BF%97%E5%A4%8D%E5%88%B6%E6%B5%81%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;日志复制流程&lt;/h3&gt;
&lt;p&gt;论文里面多次提到的log是RAFT系统中要同步的数据，称为日志条目，日志的格式如下图所示，每个日志包含要执行的指令、term和日志的下标，保存term的目的是为了及时发现日志之间的不一致性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/07/raft-log-structure.jpg&quot; alt=&quot;Raft日志格式&quot; /&gt;&lt;/p&gt;
&lt;p&gt;leader选举出来后，leader就开始正常工作，接受来自客户端的请求，客户端的请求包含了需要执行的指令，leader收到客户端的指令后，把指令作为日志条目(log entry)保存起来，同时发送Append请求到所有的follower，通知它们同步该日志条目，同步完成后，请求返回成功。如果大多数服务器都完成了日志的同步，leader认为这个指令是可以commit的，commit时会检查所有的日志，会将上一个term产生的可提交的日志一并提交（下面会提到），然后leader就会将可提交的日志里面的指令执行到状态机，并把返回结果给客户端。&lt;/p&gt;
&lt;p&gt;如果follower同步过程比较缓慢（比如超时、网络缓慢、响应丢失），leader会一直重试Append请求，直到所有的follower成功保存了所有的日志条目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里要注意的是，即使leader已经给客户端响应了，leader还是会重试，这个是合理的，因为只要leader给客户端响应了，说明该日志条目是可提交的，剩下的工作就是保证日志同步到所有的follower。对于follower而言，一个日志条目被复制了，还是需要被执行，只有在follower意识到该条目是可提交的，才会将它真正执行到follower的状态机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面描述的日志复制流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/07/raft-leader-log-replicate.jpg&quot; alt=&quot;Raft日志复制流程&quot; /&gt;&lt;/p&gt;
&lt;p&gt;1、client发起指令&lt;/p&gt;
&lt;p&gt;2、leader收到指令，发起Append请求到所有follower&lt;/p&gt;
&lt;p&gt;3、follower同步日志到本地&lt;/p&gt;
&lt;p&gt;4、follower操作完成，返回给leader&lt;/p&gt;
&lt;p&gt;5、如果大多数的follower完成同步，leader返回响应给client&lt;/p&gt;
&lt;h3 id=&quot;%E6%97%A5%E5%BF%97%E5%8C%B9%E9%85%8D%E7%89%B9%E6%80%A7&quot; tabindex=&quot;-1&quot;&gt;日志匹配特性&lt;/h3&gt;
&lt;p&gt;关于日志，Raft实现并维护了以下两个特性：&lt;/p&gt;
&lt;p&gt;1、如果两个日志条目有相同的下标和term，那么它们保存的指令是一样的&lt;/p&gt;
&lt;p&gt;2、如果两个日志条目有相同的下标和term，那么在它们之前的日志都是一样的&lt;/p&gt;
&lt;p&gt;这两个特性共同构成了Raft的日志匹配特性。如果两个日志条目有相同的下标和term，那么这些日志都是相同的。在Raft中，leader在某个term的某个下标最多只会创建一个日志条目，且它的下标不会发生变化。每一次Append请求时都会做一致性检查（follower在收到Append请求时，如果发现前一个日志条目的下标和term与请求包含prevLogIndex与prevLogTerm的不一致，follower会拒绝该请求）。Raft通过以上操作来维护日志匹配特性，从而保证了日志条目的一致性。&lt;/p&gt;
&lt;h3 id=&quot;%E6%97%A5%E5%BF%97%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7&quot; tabindex=&quot;-1&quot;&gt;日志的一致性&lt;/h3&gt;
&lt;p&gt;正常情况下，leader与follower的数据是保持一致的，但是如果leader突然挂了，可能会导致数据出现不一致。&lt;/p&gt;
&lt;p&gt;在Raft里面，leader通过强制follower直接复制leader的日志条目来解决数据不一致的问题，如果follower与leader的日志条目不一样，那么follower只认leader的数据，本地的数据会被leader的数据覆盖。&lt;/p&gt;
&lt;p&gt;leader为每个follower维护一个nextIndex（leader即将发给follower的下一个日志条目的下标），在Append请求执行时，如果发现follower的log与leader的不一致，follower会拒绝该请求，leader收到拒绝的响应，会将拒绝的follower的nextIndex减一，然后再发起一次Append请求，如果Append请求成功，leader和follower在该下标位置上的日志条目就一致了，且在接下来的任期里，这个日志会一直保持。&lt;/p&gt;
&lt;p&gt;有了日志复制的功能，leader不需要其他任何操作就能恢复数据的一致性，leader不会删除或覆盖自己的日志条目，只需要正常的执行，在Append请求失败时会自动检查一致性，最终达到一致。&lt;/p&gt;
&lt;p&gt;日志复制的机制也展示了Raft的特性：只要大多数机器都是正常运行的情况下，Raft会接收、复制和执行新的日志条目；正常情况下，经过一次RPC后新的日志条目都可以被复制到大多数机器；单个机器超时不会影响整体的性能。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%89%E5%85%A8%E6%80%A7&quot; tabindex=&quot;-1&quot;&gt;安全性&lt;/h2&gt;
&lt;p&gt;前面介绍了leader的选举和日志的复制，但仅靠这两个机制还不能有效地保证每一台状态机使用相同的顺序执行相同的命令。比如在仅有这两种机制的前提下，遇到一些异常的情况，日志就会乱序或者被其他当选的leader覆盖，因此还需要一些其他的机制来保障数据的一致性。&lt;/p&gt;
&lt;h3 id=&quot;%E9%80%89%E4%B8%BE%E9%99%90%E5%88%B6&quot; tabindex=&quot;-1&quot;&gt;选举限制&lt;/h3&gt;
&lt;p&gt;在Raft里的第一个限制：限制日志的流向只能从leader到follower，且leader不会覆盖已经存在的日志条目。&lt;/p&gt;
&lt;p&gt;第二个限制，是选举leader时候的投票限制，candidate包含了所有已提交的日志条目才能被选上leader。&lt;/p&gt;
&lt;p&gt;每一次选举leader，candidate都会向其他机器发起请求，获得每个机器最新的日志条目信息，如果candidate的日志比大多数机器的版本还新，那么它就能被选上leader。&lt;/p&gt;
&lt;p&gt;日志版本是最新的定义为：如果两条日志最大下标的term不相同，那么term较大者胜出；如果两条日志最大下标相同，那么日志长度较大者胜出。可以用以下逻辑描述：&lt;/p&gt;
&lt;p&gt;有机器s1，s2，定义机器包含的日志log，log里面最新的日志下标为lastIndex，log的长度为log.length，通过以下的逻辑可以判断日志是否最新：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;	log1 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; s1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;br /&gt;	log2 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; s2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; log1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; log1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;		log1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; log1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;br /&gt;	then&lt;br /&gt;		s1 win&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;		s2 win&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%8F%90%E4%BA%A4%E4%B9%8B%E5%89%8Dterm%E7%9A%84%E6%97%A5%E5%BF%97%E6%9D%A1%E7%9B%AE&quot; tabindex=&quot;-1&quot;&gt;提交之前term的日志条目&lt;/h3&gt;
&lt;p&gt;前面提到，如果一个日志被复制到大多数机器，那么leader就认为该日志是可提交的，但是，如果leader提交该日志前崩溃了，就会出现意想不到的现象，举个例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/07/raft-leader-crash-before-commit.jpg&quot; alt=&quot;leader在提交前挂了&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示的场景：
a、S1被选中leader，在index=2处复制日志进行到一半（只在S2进行了）
b、S1挂了，通过S3、S4和自己的投票，S5被选中leader，term=3，在index=2的地方接收了一个与S1不同的日志
c、S5挂了，S1重新启动，被选中为leader，term=4，但是会继续它上一次的复制，term=2，index=2的日志复制到S3，此时这条日志已经被复制到大多数机器，被认为可以提交的，此时准备进行提交&lt;/p&gt;
&lt;p&gt;以下两种是假设的情景：
如果
d、S1挂了，S5可以被选为leader，复制步骤b的数据，此时index=2的数据就被S5覆盖了&lt;/p&gt;
&lt;p&gt;如果
e、如果S1在挂了之前复制了当前term收到的日志数据（index=3，term=4）到大多数机器，而根据投票的限制，S5不能被选为leader，因为log5[3].term &amp;lt; log3[3].term。复制到大多数机器后，这条数据可以被提交，提交时它之前的日志条目也会被一并提交&lt;/p&gt;
&lt;p&gt;上面的d、e是假设的场景，为了避免上面描述的问题，Raft有另一个限制，&lt;em&gt;leader不会提交前一个term被认为可以提交的日志，只能提交当前term认为可以被提交的日志&lt;/em&gt;。由于日志匹配特性，Raft会在提交当前term的日志时，把之前term可提交的日志间接地一并提交（如果两个日志条目有相同的下标和term，那么在它们之前的日志都是一样的，所以leader必须把上一个可提交的日志提交了，否则就会出现leader或follower之间的数据不一致）。&lt;/p&gt;
&lt;p&gt;leader提交日志时的操作是：&lt;/p&gt;
&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; entry in &lt;span class=&quot;token function&quot;&gt;GetEntries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lastCommited&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newCommited&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;   entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过选举条件限制和leader只能提交当前term的日志的限制，就不会出现上面途中描述的问题。&lt;/p&gt;
&lt;p&gt;根据Raft算法的基础，可以论证leader完整性特性，可以进一步证明状态机，详细的论证过程就不翻译了，如果有兴趣的话可以翻阅论文。&lt;/p&gt;
&lt;h2 id=&quot;follower%E5%92%8Ccandidate%E5%B4%A9%E6%BA%83&quot; tabindex=&quot;-1&quot;&gt;follower和candidate崩溃&lt;/h2&gt;
&lt;p&gt;follower或candidate崩溃处理方式是一样的，如果follower/candidate崩溃了，那么后续的Append请求或者RequestVote请求就会失败。Raft的实现是不断重试这些请求，直到机器重新启动。（Raft的RPC请求是幂等的，所以重复的RPC不会影响系统。）&lt;/p&gt;
&lt;h2 id=&quot;%E6%97%B6%E9%97%B4%E5%92%8C%E5%8F%AF%E7%94%A8%E6%80%A7&quot; tabindex=&quot;-1&quot;&gt;时间和可用性&lt;/h2&gt;
&lt;p&gt;为了保证Raft系统的高可用，Raft要求安全性不会受执行时间的影响，即，系统不会由于机器的响应时间出现异常的结果。因为需要一个稳定的leader来保证Raft系统的正常运行。&lt;/p&gt;
&lt;p&gt;Raft有三个时间属性&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;broadcastTime: 服务器发出rpc到收到响应的时间，通常是0.5～20ms，因为rpc需要将数据持久化到本地&lt;/li&gt;
&lt;li&gt;electTimeout: 选举leader超时时间，10～500ms&lt;/li&gt;
&lt;li&gt;MTBF：机器平均故障时间，通用以月为单位&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过以下的时间表达式，Raft可以保证leader的稳定性：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;broadcastTime&amp;lt;=electionTimeout&amp;lt;=MTBF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、因为Raft需要依赖心跳包来维持一个leader，所以broadcastTime&amp;lt;=electionTimeout&lt;/p&gt;
&lt;p&gt;2、为了保持系统稳定，electionTimeout&amp;lt;=MTBF&lt;/p&gt;
&lt;h2 id=&quot;%E8%A7%A3%E7%AD%94q%26a&quot; tabindex=&quot;-1&quot;&gt;解答Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;上一次留下的一个问题：&lt;/p&gt;
&lt;p&gt;Q1：在leader选举过程中，candidate是怎么决定要投票给发起RequestVote Rpc的机器？是不是接收到请求就要投票？成为leader有没有什么要求？&lt;/p&gt;
&lt;p&gt;这个问题在选举限制部分讲到，一次选举leader，candidate都会向其他机器发起请求，获得每个机器最新的日志条目信息，如果candidate的日志比大多数机器的版本还新，那么它就能被选上leader。&lt;/p&gt;
&lt;p&gt;日志版本是最新的定义为：如果两条日志最大下标的term不相同，那么term较大者胜出；如果两条日志最大下标相同，那么日志长度较大者胜出。即：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;	log1 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; s1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;br /&gt;	log2 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; s2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; log1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; log1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;		log1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;term &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; log1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; log2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;br /&gt;	then&lt;br /&gt;		s1 win&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;		s2 win&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Q2：日志匹配特性与leader提交时要提交上一个term可提交的日志有什么关联？&lt;/p&gt;
&lt;p&gt;回顾一下日志匹配特性：&lt;/p&gt;
&lt;p&gt;1、如果两个日志条目有相同的下标和term，那么它们保存的指令是一样的&lt;/p&gt;
&lt;p&gt;2、如果两个日志条目有相同的下标和term，那么在它们之前的日志都是一样的&lt;/p&gt;
&lt;p&gt;如果leader不提交了上一个term的日志，会出现数据不一致，无法维持日志匹配特性第二部分。&lt;/p&gt;
&lt;p&gt;举个例子，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/07/raft-log-match.jpg&quot; alt=&quot;Raft日志复制解释&quot; /&gt;&lt;/p&gt;
&lt;p&gt;假设有5台机器，如果在term2时，S1是leader，大多数机器都复制了下标2的日志，此时S4、S5并没有数据，提交之前S1挂了，然后term3时S3被选为leader，大多数机器都复制了下标3的日志，此时leader（S3）提交了下标3的日志，但是不提交下标2的数据。那么S4只能收到index=3，term=3的数据，那么就会出现S1、S4的index=3，term=3之前的日志数据不一致了。&lt;/p&gt;
&lt;p&gt;如果term3时把下标2到下标3之间的数据都提交了，leader在复制时发现日志不一致，就会强制使用leader的数据，就不会出现这个问题。就符合日志匹配特性了。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;到这里为止，本次探索Raft的历程告一段落，这一次的探索，收获颇深，日志复制和leader应该算是Raft中最难的部分，反复阅读论文和上网查阅资料，终于搞懂了遇到的难题。&lt;/p&gt;
&lt;p&gt;Raft通过选举限制确保了成为leader的机器必须是拥有最新数据的，避免了数据被覆盖的情况；通过提交时提交之前term的日志满足日志匹配特性；通过数据的一致性检查保证了leader与follower之间的数据一致性。总的来说，Raft通过限制和规定，保证了系统的稳定运行和数据一致性，这也是协议的功能，使用该协议的系统必须遵从这些约定才能正常的运作。&lt;/p&gt;
&lt;p&gt;下一次再继续探索集群关系变化、日志压缩处理等等话题。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/raft-dev/d-3XQbyAg2Y&quot;&gt;Question about Committing entries from previous terms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32052223&quot;&gt;Raft算法详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xybaby/p/10124083.html&quot;&gt;一文搞懂Raft算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，麻烦顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Raft探索历程--Part1</title>
    <link href="https://hoohack.me/blog/2020-06-21-exploring-raft-part-one/"/>
    <updated>2020-06-21T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-06-21-exploring-raft-part-one/</id>
    <content type="html">&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot; tabindex=&quot;-1&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Raft是一个保证分布式系统数据一致性的共识算法，诞生的目的就是为了探索一种更容易理解的共识算法，原因是上一个描述这个算法的协议--Paxos较难理解和在生产环境上使用。（注：笔者没有掌握Paxos算法，所以这里不会去作比较，后续如果学习到的话会做一个比较）&lt;/p&gt;
&lt;p&gt;笔者主要是通过阅读&lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;Raft论文&lt;/a&gt;和观看&lt;a href=&quot;https://www.bilibili.com/video/BV1R7411t71W?p=7&quot;&gt;MIT 6.824的教程视频&lt;/a&gt;学习的。&lt;/p&gt;
&lt;p&gt;论文原文是英文版的，里面的一些专用名词笔者打算尽量保留英文的描述，因为这些关键名词对于理解概念十分重要，但是翻译过来会比较拗口，也找不到合适的中文名词代替，所以打算保留英文的描述，当然，名词的含义还是有必要先解释一下。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;%E8%8B%B1%E6%96%87%E5%90%8D%E8%AF%8D%E5%A4%87%E6%B3%A8&quot; tabindex=&quot;-1&quot;&gt;英文名词备注&lt;/h2&gt;
&lt;p&gt;Consensus algorithms：共识算法，用来保证分布式系统一致性的方法。&lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_algorithm&quot;&gt;Consensus algorithm&lt;/a&gt;
leader：节点集群中的领导者，决策者，负责复制和提交客户端的日志。
term：任期，领导者的当任时间。
candidate：准备参与leader选举的候选机器
follower：追随者，选举结束后，没有成为leader的candidate就是跟随者，接收leader的指令
majority：大多数投票机制，指集群中大多数机器同意某个节点成为leader，这里的大多数机器不只是指正在运行的服务器，即使机器投票后挂了也是majority中的一部分&lt;/p&gt;
&lt;h2 id=&quot;raft%E7%AE%80%E4%BB%8B&quot; tabindex=&quot;-1&quot;&gt;Raft简介&lt;/h2&gt;
&lt;p&gt;在MIT 6.824视频中，在Raft之前讨论了Map Reduce、GFS、VMWare FT，这些现存容错系统的处理方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MapReduce系统，只是复制计算，但是依赖单master&lt;/li&gt;
&lt;li&gt;GFS，复制副本数据，依赖master另外选主&lt;/li&gt;
&lt;li&gt;VMware FT复制服务依赖test-and-set选择master&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;单点master可以避免“脑裂”，但是master始终是单点，无法实现分布式存储。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Split-brain_(computing)&quot;&gt;脑裂&lt;/a&gt;，是指一个集群中出现了网络异常的情况导致有两个节点各自都认为它们都是主节点，于是一个集群被拆分为两个集群，解决脑裂问题的方式就是添加majority机制，而Paxos和Raft就是这类解决方案中的其中两种。&lt;/p&gt;
&lt;p&gt;由于Paxos的晦涩难懂导致难以理解以及实现起来的难度，经过不断的挣扎，学者们就发明了Raft。Raft的目标是为了设计一种更易于理解的共识算法。&lt;/p&gt;
&lt;p&gt;为了让共识算法更容易理解，Raft将共识算法中的核心内容拆分开来实现：leader选举，日志复制，安全性，以及通过实施一个更强级别的一致性来减少需要考虑的状态数量。&lt;/p&gt;
&lt;p&gt;Raft跟现存的共识算法很相似，但是它有新增一些独特的特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Strong Leader，比如日志只能由首领发送到其他的服务器&lt;/li&gt;
&lt;li&gt;Leader Election，Raft使用随机定时器进行选举，解决冲突时更简单快捷&lt;/li&gt;
&lt;li&gt;Membership changes，使用共同共识的方法来处理集群内成员变换的问题，这种方法处理时，处于调整过程中的两种不同配置的集群中的大多数机器会重叠。这样一来，集群在成员变换阶段依然能继续运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81%E6%9C%BA&quot; tabindex=&quot;-1&quot;&gt;复制状态机&lt;/h2&gt;
&lt;p&gt;Replicated state machine，状态复制机，共识算法是在复制状态机的背景下诞生的，复制状态机用于来解决分布式系统的各种容错问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/06/raft-RSM.jpg&quot; alt=&quot;RSM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图，复制状态机实现方式是使用复制日志，每份日志都使用相同顺序来保存相同的指令，服务器执行时是按照日志的顺序来执行，最终得到的结果都是一致的。&lt;/p&gt;
&lt;p&gt;共识算法在复制状态机的工作就是保证所有的复制日志都是一致的。共识实现模块（如Raft）接收来自客户端的请求后，添加到机器的日志里，使用共识模块进行通信，保证所有日志最终都包含相同顺序的请求。看到这里想起了&lt;a href=&quot;https://www.hoohack.me/2017/07/11/learning-mysql-replication-detail&quot;&gt;MySQL的主从复制原理&lt;/a&gt;，有点类似复制状态机的实现方式。&lt;/p&gt;
&lt;p&gt;共识算法在实际应用中的特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;安全性保证，绝不返回一个错误的结果，在错误情况下都能保证正确&lt;/li&gt;
&lt;li&gt;可用性，集群中只要有大多数的机器可运行且能够相互通信，就可以保证可用。&lt;/li&gt;
&lt;li&gt;不依赖时序保证一致性&lt;/li&gt;
&lt;li&gt;通常情况下，一条指令能在集群中大多数节点响应一次远程过程调用时完成。少部分较慢的节点不会影响系统整体的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;paxos&quot; tabindex=&quot;-1&quot;&gt;Paxos&lt;/h2&gt;
&lt;p&gt;Paxos定义了一个能够达成单一决策共识的协议，比如单条的复制日志项。主要的两个缺点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原理很难理解，完整的解释不够透明。&lt;/li&gt;
&lt;li&gt;没有提供一个较好的基础来构建一个现实中的系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;注：笔者没有深入学习过Paxo，不能更多的评论，只能从论文和视频的角度做个小总结。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%9D%E8%A1%B7--%E6%9B%B4%E5%AE%B9%E6%98%93%E7%90%86%E8%A7%A3%E7%9A%84%E8%AE%BE%E8%AE%A1&quot; tabindex=&quot;-1&quot;&gt;初衷--更容易理解的设计&lt;/h2&gt;
&lt;p&gt;Raft有很多个设计的目标：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;提供一个完整构建系统的基础&lt;/li&gt;
&lt;li&gt;高效性&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;而Raft最重要的目标，也是最大的挑战，就是让有一个更容易理解的设计。核心目标就是可理解性，必须是容易理解的，即使是普通开发者也能理解。&lt;/p&gt;
&lt;p&gt;Raft的学者们意识到要达到Raft的目标非常难，所以使用了&lt;strong&gt;问题分解&lt;/strong&gt;和&lt;em&gt;通过减少状态数量&lt;/em&gt;来达到这一目的。&lt;/p&gt;
&lt;p&gt;问题分解也是平常开发中用到的一个很重要的技能，如需求拆解、实现细节拆解，把大问题拆解为小问题，然后逐个击破，最后完成目标。&lt;/p&gt;
&lt;p&gt;在大多数情况下Raft都试图去消除不确定性，但也有一些情况下增加一些不确定性可以提升系统的可理解性。比如，随机化方法增加了不确定性，但通过使用相似的方法处理所有可能的选择，有利于减少状态空间数量。系统中使用随机化去简化Raft中领导选举算法。&lt;/p&gt;
&lt;p&gt;接下来要探索Raft的设计和实现原理，包含了数据结构和函数的定义，leader选举、日志复制、安全性等拆解功能的详细设计。&lt;/p&gt;
&lt;h2 id=&quot;raft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;Raft共识算法&lt;/h2&gt;
&lt;p&gt;Raft是一种用来管理复制日志的共识算法。&lt;/p&gt;
&lt;p&gt;通过选举一个唯一的leader，Raft给予leader完整的责任去管理复制日志来实现共识。leader会接受来自客户端的日志条目，复制这些条目到其他服务器，leader自己就可以决定将日志条目放到哪台服务器，数据流的方向只能从leader到其他服务器。&lt;/p&gt;
&lt;p&gt;一个集群里有且只能有一台leader，leader拥有最大的权利。如果某一台leader当机了，会马上选出下一台leader。&lt;/p&gt;
&lt;p&gt;如前面提到过的，Raft将整个共识算法拆分为三个独立的子问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;leader选举：当leader挂了，会选举出新的leader&lt;/li&gt;
&lt;li&gt;日志复制：日志条目只能从leader通知到集群的其他服务器，服务器只会认leader的数据&lt;/li&gt;
&lt;li&gt;安全性：Raft的核心安全性是状态机的安全，Raft通过在选举机制增加一些限制来保证提供的状态数据都是安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如图所示是Raft的数据结构和函数的定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/06/raft-image-2.jpg&quot; alt=&quot;raft-condense&quot; /&gt;&lt;/p&gt;
&lt;p&gt;图里是Raft算法的实现概览，定义了一个集群中维护的状态以及两个方法。方法分别是复制日志条目和请求投票，复制日志条目是在客户端发送给服务端后，由leader复制到其他的follower时调用，可被用做leader的心跳包请求。请求投票时每一个leader的选举时，candidate向其他机器返发起的请求，如果机器被选中为leader，会马上发一个心跳包出去，其他candidate会成为follower，也意味着该次term的选举结束了。&lt;/p&gt;
&lt;p&gt;下图列举了Raft算法中的关键特性：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/06/raft-image-3.jpg&quot; alt=&quot;raft-properties&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Raft通过以上这些特性来保证集群里leader选举和日志复制的正常运行，同时也保证了运行的安全性。&lt;/p&gt;
&lt;p&gt;接下来继续探索Raft的实现：包括leader选举、日志复制、安全性等等，全部写完的话，涉及的篇幅较长，篇幅太长的文章会影响阅读体验，也较难消化，所以笔者打算另外开一篇文章继续。&lt;/p&gt;
&lt;p&gt;到这里为止，第一次的探索历程就暂告一个段落了，笔者想留下一个在探索过程中困惑住的问题。&lt;/p&gt;
&lt;p&gt;Q1:在leader选举过程中，candidate是怎么决定要投票给发起RequestVote Rpc的机器？是不是接收到请求就要投票？成为leader有没有什么要求？&lt;/p&gt;
&lt;p&gt;这个问题，会在下一次探索历程中给出答案。如果你有任何问题，欢迎留言。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，麻烦顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>使用拦截器统一处理异常</title>
    <link href="https://hoohack.me/blog/2020-06-13-handle-exception-in-one-place/"/>
    <updated>2020-06-13T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-06-13-handle-exception-in-one-place/</id>
    <content type="html">&lt;p&gt;作为一个业务仔，在业务接口代码中肯定会遇到处理异常的情况，比如有代码逻辑的异常，业务逻辑的异常等等。这些异常场景是非常非常多的，这么多异常逻辑要处理，就意味着要写很多重复的代码，作为一个有点追求的业务仔，不能只是懂得CURD，当然希望代码看起来简洁、舒服一点。&lt;/p&gt;
&lt;p&gt;本文打算分享笔者处理异常情况的演进过程，然后给出统一异常处理的示例。&lt;/p&gt;
&lt;p&gt;一开始的方法是定义一个业务异常类，当捕获到业务异常时，使用异常的错误码和错误信息，构造错误提示返回。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;* 错误码枚举类&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;server error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;msg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;msg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;* 自定义业务异常类&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt; errCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; errCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt; errCode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; errCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testAMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token comment&quot;&gt;// 业务异常代码&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BIZ_CODE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;* 接口返回的通用结构HttpResult&lt;br /&gt;* {&quot;code&quot;: 0, &quot;msg&quot;: &quot;OK&quot;}&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestService&lt;/span&gt; testService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			testService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;testAMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后来发现需要进行一次优化，首先，随着业务代码越来越多，这些try...catch看起来就好臃肿了。&lt;/p&gt;
&lt;p&gt;其次，在底层代码有异常时也要在外层捕获住，然后一层一层地往外抛，直到业务接口返回处返回错误信息，如果是一个业务逻辑特别复杂的接口，这些异常处理的代码就会遍布整个系统，使得这些异常代码看起来十分不美观，代码可读性也较差。&lt;/p&gt;
&lt;p&gt;久而久之，就在想是否有一种跟&lt;a href=&quot;https://www.hoohack.me/2020/04/22/common-check-with-interceptor&quot;&gt;校验拦截器&lt;/a&gt;一样的方法，在某个地方统一处理这些判断，使得代码看起来比较美观。&lt;strong&gt;答案是有的&lt;/strong&gt;，就是使用&lt;code&gt;ExceptionHandler&lt;/code&gt;和&lt;code&gt;RestControllerAdvice&lt;/code&gt;注解。&lt;/p&gt;
&lt;p&gt;首先，定义一个类：&lt;code&gt;SpringMvcExceptionDemo&lt;/code&gt;，类加上&lt;code&gt;RestControllerAdvice&lt;/code&gt;注解，类里面定义一个方法exceptionHandler，方法前面加上&lt;code&gt;ExceptionHandler&lt;/code&gt;注解，然后就可以在方法里面写异常判断逻辑，对异常逻辑进行相应的处理。&lt;/p&gt;
&lt;p&gt;具体的实现代码示例如下：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestControllerAdvice&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpringMvcExceptionDemo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exceptionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt; be &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;be&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; be&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PARAM_ERROR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SERVER_ERR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	testService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;testAMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ResponseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一来，就只需要在该抛出业务异常的地方抛出异常，由拦截器统一处理异常即可，减少了很多重复代码，同时提高代码的可读性。&lt;/p&gt;
&lt;p&gt;RestControllerAdvice 和 ExceptionHandler&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RestControllerAdvice是Spring框架中的一个注解，这个注解包含了&lt;code&gt;ControllerAdvice&lt;/code&gt;和&lt;code&gt;ResponseBody&lt;/code&gt;，帮助我们通过加入一个横切点&lt;code&gt;ExceptionHandler&lt;/code&gt;来处理RestfulAPI中的异常。执行的时机是在&lt;code&gt;doDispatch&lt;/code&gt;中，调用&lt;code&gt;processDispatchResult&lt;/code&gt;方法，如果有异常，则会调用添加了&lt;code&gt;ExceptionHandler&lt;/code&gt;注解的方法去判断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/06/exception-handler-progress.jpg&quot; alt=&quot;统一处理异常拦截器流程&quot; /&gt;&lt;/p&gt;
&lt;p&gt;核心处理代码：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HandlerExceptionResolver&lt;/span&gt; handlerExceptionResolver &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;handlerExceptionResolvers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	exMv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handlerExceptionResolver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolveException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exMv &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;代码和原理比较简单，统一处理异常的目的只是为了消除重复的代码块，写出更简洁的代码，现在写代码也是坚持这个想法，希望能探索出更多的技巧，有其他技巧的也欢迎一起讨论。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，麻烦顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>为什么需要分布式系统</title>
    <link href="https://hoohack.me/blog/2020-06-06-why-we-need-distributed-system/"/>
    <updated>2020-06-06T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-06-06-why-we-need-distributed-system/</id>
    <content type="html">&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot; tabindex=&quot;-1&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近在学习MIT6.824的分布式系统课程，正在看Raft的论文，Raft是一种共识算法(&lt;strong&gt;Consensus algorithms&lt;/strong&gt;)，共识算法是用来保证分布式系统里数据的一致性的算法，所以也可以说是一个一致性算法。&lt;/p&gt;
&lt;p&gt;在学习这个课程的过程中，发现其实对分布式系统这个概念很模糊，好像知道是什么却又好像说不出来，不禁思考起来，究竟什么是分布式系统？为什么我们需要分布式系统？这个问题也许很简单，但是还是想通过自己的语言去表达，加深印象，希望我能阐述清楚。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8D%95%E6%9C%BA%E7%B3%BB%E7%BB%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98&quot; tabindex=&quot;-1&quot;&gt;单机系统遇到的问题&lt;/h2&gt;
&lt;p&gt;为什么我们需要分布式系统而不是单机系统呢？一个概念或者理论的出现，都是为了解决问题，单机系统遇到的问题是什么呢？分布式系统要解决的问题主要是单机系统中系统容量不足及提高系统可用性。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E5%AE%B9%E9%87%8F&quot; tabindex=&quot;-1&quot;&gt;提高系统容量&lt;/h3&gt;
&lt;p&gt;随着业务越来越复杂，服务也会变得越来越复杂，单台机器的CPU、内存已经无法满足部署一个庞大系统的性能要求。当然可以通过提高系统配置暂时解决问题，但是不管如何提高系统的配置，单台机器总会达到性能瓶颈的时候，所以需要多台机器才能应对这些扩张的功能。通过水平（加机器）和垂直（拆分为多个子系统）拆分系统，变成了一个分布式架构。&lt;/p&gt;
&lt;h3 id=&quot;%E8%A7%A3%E5%86%B3%E5%8D%95%E7%82%B9%E6%95%85%E9%9A%9C&quot; tabindex=&quot;-1&quot;&gt;解决单点故障&lt;/h3&gt;
&lt;p&gt;在单台机器上部署服务，如果机器出现故障导致服务挂了，那么整个系统就会崩溃了。因此就要提高系统的可用性，系统的高可用性意味着一群服务器运行时与单台机器运行时没区别。这意味着要解决系统架构中的单点故障问题，通过引入分布式架构来增加冗余，从而提高系统的可用性，即使单台机器挂了也能保证服务正常运作。&lt;/p&gt;
&lt;p&gt;基于上面两个原因，我们就需要分布式系统来解决系统容量不足和系统高可用问题。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%98%AF%E4%BB%80%E4%B9%88&quot; tabindex=&quot;-1&quot;&gt;分布式系统是什么&lt;/h2&gt;
&lt;p&gt;看看维基百科上的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another.[1] The components interact with one another in order to achieve a common goal. Three significant characteristics of distributed systems are: concurrency of components, lack of a global clock, and independent failure of components.[1] Examples of distributed systems vary from SOA-based systems to massively multiplayer online games to peer-to-peer applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在计算机科学里，分布式系统是一个组件/软件分布在网络中不同服务器，服务器之间通过传递信息来通信和协作的系统。&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84&quot; tabindex=&quot;-1&quot;&gt;分布式架构&lt;/h3&gt;
&lt;p&gt;举一个例子，来看看一个分布式系统架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/06/distributed-system-demo.jpg&quot; alt=&quot;理解Java8中的时间API&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示，A、B、C三台机器，机器A部署了服务AA、BB，机器B部署了BB、CC，机器C部署了AA、CC，AA需要调用BB，BB需要调用CC，即AA与BB通信，BB与CC通信。&lt;/p&gt;
&lt;p&gt;一个接口rpcA调用AA，AA调用BB，BB调用CC，调用路径如图（1-&amp;gt;2-&amp;gt;3），每一个调用所到达的机器都有可能为服务部署的机器之一。&lt;/p&gt;
&lt;p&gt;图所表示的分布式系统架构有很多细节没有展示出来，但这是一个比较简单的分布式架构例子。&lt;/p&gt;
&lt;p&gt;分布式系统中，要实现调用服务能到达部署的机器之一，就要用到负载均衡，可以分发集中的流量。像例子中的rpcA接口，调用链路&lt;code&gt;rpcA-&amp;gt;AA-&amp;gt;BB-&amp;gt;CC&lt;/code&gt;，整个链路较长，可以把全部的调用都写到rpcA接口中，但是如果某一步失败了，整个接口就失败了，因此可以将流程拆分到多个小的服务，微服务化，提高系统性能。&lt;/p&gt;
&lt;p&gt;以上就是分布式系统的介绍及分布式系统诞生的原因，分布式系统的性价比很高、处理能力强、可靠性高、也有很好的扩展性，能为系统带来很好的性能和可用性。但是，分布式系统中还有很多不确定的问题存在。&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98&quot; tabindex=&quot;-1&quot;&gt;分布式系统遇到的问题&lt;/h3&gt;
&lt;p&gt;做了负载均衡和微服务，是不是就可以高枕无忧，安心等待下一步的扩容扩展服务？很遗憾，分布式系统中还有很多的不确定性，比如应用架构引入了分布式系统之后，还有可能带来下面这些问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;系统的吞吐量会变大，但是响应时间会变长。&lt;/li&gt;
&lt;li&gt;某个非核心服务出现故障，为了不影响主流程，要加入服务降级和熔断策略&lt;/li&gt;
&lt;li&gt;同一个请求可能被服务集群里面的多台机器处理，然后保证幂等性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些问题都需要引入其他手段解决来提高系统的稳定性，而加入了这些技术之后，还会衍生出更多的子问题，这就需要我们不断地用各式各样的技术和手段来解决这些问题。这些问题会在后面文章再做介绍。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;分布式系统领域里，还有一大片浩瀚的海洋可以探索，上面的例子只是从分布式应用角度介绍了这个概念，分布式系统里面还有分布式计算、分布式数据与存储等等领域。每一个领域都值得深入探索，这是一条漫长的学习之路。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，顺手点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mockito-提高单元测试效率利器</title>
    <link href="https://hoohack.me/blog/2020-05-30-mockito-in-unit-test/"/>
    <updated>2020-05-30T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-05-30-mockito-in-unit-test/</id>
    <content type="html">&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot; tabindex=&quot;-1&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前在开发进行到写单元测试阶段的时候，发现要测试的方法里面是包含依赖的：外部接口RPC调用、DB调用。在某些情况下，部分依赖不稳定或者无法在测试环境调用时，会导致用例偶尔执行失败。&lt;/p&gt;
&lt;p&gt;另外一点，很多用例都是在测试用例的开头写了&lt;code&gt;@SpringRunTest&lt;/code&gt;的注解，导致跑用例的时候会启动整个Spring容器，这样一来，运行测试用例就非常慢了。当在一些比较大的项目运行用例时，甚至达到了每次启动容器需要5-6分钟的时长，渐渐就有点受不了这种操作，每改一行代码心里都焦急，因为如果错了的话又要再等5-6分钟才能看到效果了。后来请教同事和上网搜索，找到了一种比较快且安全的方案，使用Mock框架--&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;，学习并实践了一段时间，总结一下使用方法。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;mockito&quot; tabindex=&quot;-1&quot;&gt;Mockito&lt;/h2&gt;
&lt;p&gt;Mockito是当前最流行的单元测试Mock框架。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BB%80%E4%B9%88%E6%98%AFmock&quot; tabindex=&quot;-1&quot;&gt;什么是Mock&lt;/h3&gt;
&lt;p&gt;Mock的字面意思就是模仿，虚拟，在单元测试中，使用Mock可以虚拟出一个外部依赖对象。&lt;/p&gt;
&lt;p&gt;对于在单元测试中一些不容易构造或者不容易获取的对象（如外部服务），用一个Mock对象来创建，可以降低测试的复杂度，只关心当前单元测试的方法。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8mock&quot; tabindex=&quot;-1&quot;&gt;为什么用Mock&lt;/h3&gt;
&lt;p&gt;单元测试的目的就是为了验证一个代码单元的正确性，真正要验证的只是某个输入对应的输出的正确与否。如果把外部依赖服务引入进来，就会增加原来单元的复杂度，且在该单元中隐形地掺杂了其他功能的内容。&lt;/p&gt;
&lt;p&gt;使用Mock对象进行单元测试，开发可以只关心要测试单元的代码。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B&quot; tabindex=&quot;-1&quot;&gt;使用示例&lt;/h2&gt;
&lt;p&gt;先看看代码示例，假设有以下的场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;验证获取用户信息接口：包含用户ID、用户昵称、是否vip&lt;/li&gt;
&lt;li&gt;是否vip需要外部服务VIPService获取，通过RPC调用，测试环境如果机器性能较差或者网络不好会导致用例不稳定&lt;/li&gt;
&lt;li&gt;编写单元测试判断用户VIP信息返回是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;需求是判断获取用户信息接口返回的格式是否正确，与vip接口的返回值无关，只要透传vip接口返回的字段即可，测试代码如下：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PowerMockRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserServiceTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@InjectMocks&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserService&lt;/span&gt; userService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Mock&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VIPService&lt;/span&gt; vipService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;vipService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isVip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Result&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isVip&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解释下上面代码用到的几个注解&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Mock&lt;/strong&gt;：创建一个Mock&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@InjectMocks&lt;/strong&gt;：Mock一个实例，其余用Mock注解创建的mock将被注入到该实例中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mockito.when(...).thenReturn(...)&lt;/strong&gt;：Mock方法，如果满足when里面的条件，返回thenReturn指定的结果。&lt;/p&gt;
&lt;p&gt;在这段代码里，使用&lt;code&gt;@Mock&lt;/code&gt;注解创建了一个VipService实例，使用&lt;code&gt;@InjectMock&lt;/code&gt;创建了UserService，Mock创建的vipService实例会被注入到UserService的实例中，在写测试用例的时候就可以模拟vipService的行为。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mockito.when(vipService.isVip(Mockito.anyString())).thenReturn(true);&lt;/code&gt;
这段代码表示不管传任何参数给vipService.isVip方法，该方法都会返回true，这样，就不影响获取用户信息接口的正常测试，也可以使用断言验证返回的数据。&lt;/p&gt;
&lt;h2 id=&quot;%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%9C%BA%E6%99%AF&quot; tabindex=&quot;-1&quot;&gt;遇到过的场景&lt;/h2&gt;
&lt;p&gt;以上是使用Mockito实践最简单的示例，在生产环境使用过程中，会有各种各样的需求需要满足，下面列一下笔者遇到过的场景。&lt;/p&gt;
&lt;h3 id=&quot;mock%E5%BC%82%E5%B8%B8&quot; tabindex=&quot;-1&quot;&gt;mock异常&lt;/h3&gt;
&lt;p&gt;这种场景是，方法里面声明了可能会抛出A异常，而A异常有多种可能性，不同的异常对应不同的message，为了验证抛出某种A异常后的功能，就需要模拟方法抛出指定message的A异常。&lt;/p&gt;
&lt;p&gt;使用方式是定义一个&lt;code&gt;Rule&lt;/code&gt;注解的属性，在使用时，设置thrown抛出的异常类型和所带的message。简要代码如下：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AException&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PowerMockRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockExceptionTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Rule&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExpectedException&lt;/span&gt; thrown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExpectedException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mockException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        thrown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        thrown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expectMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;expected message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// test code&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mock%E7%A9%BA%E6%96%B9%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;mock空方法&lt;/h3&gt;
&lt;p&gt;mock一个空方法，比较简单，就是调用&lt;code&gt;doNothing().when()...&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;mock%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;mock静态方法&lt;/h3&gt;
&lt;p&gt;如果要Mock静态方法，首先在类的开头增加注解：&lt;code&gt;@PrepareForTest({ClassNameA.class})&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在需要Mock类方法的之前，增加代码：&lt;code&gt;PowerMockito.mockStatic(ClassNameA.class);&lt;/code&gt;，然后就可以愉快的Mock了。简要代码如下：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassNameA&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;methodA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// code&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ret&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PowerMockRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@PrepareForTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassNameA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MockStaticClassTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mockStaticMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;PowerMockito&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockStatic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassNameA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassNameA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;methodA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// test code&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E9%83%A8%E5%88%86mock&quot; tabindex=&quot;-1&quot;&gt;部分mock&lt;/h3&gt;
&lt;p&gt;对于某些场景，在一个单元测试里，需要某个方法Mock，某个方法走正常逻辑，这种操作就一点要启动容器，目前还没找到合适的方法可以进行这种操作，如果有更好的方法麻烦指点指点。笔者目前的做法是将原来的方法再拆分，拆分为更小的单元，让各自可以进行Mock，在集成测试时才真正执行全部代码。&lt;/p&gt;
&lt;p&gt;以上是笔者在日常开发中遇到的场景&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;单元测试是针对代码逻辑最小单元进行正确性检验的校验工作，写好单元测试，对于发现代码bug、保障系统稳定性以及重构而言都是非常必要的一项工作，可以提前发现一些隐藏问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://howtodoinjava.com/best-practices/unit-testing-best-practices-junit-reference-guide&quot;&gt;JUnit最佳实践&lt;/a&gt;这篇文章提到，Mock所有外部服务和状态：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mock out all external services and state
Otherwise, behavior in those external services overlaps multiple tests, and state data means that different unit tests can influence each other’s outcome. You’ve definitely taken a wrong turn if you have to run your tests in a specific order, or if they only work when your database or network connection is active.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, this is important because you would not love to debug the test cases which are actually failing due to bugs in some external system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，还是尽可能使用Mock来进行有外部服务的单元测试。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，请点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;参考文章
&lt;a href=&quot;https://howtodoinjava.com/best-practices/unit-testing-best-practices-junit-reference-guide&quot;&gt;JUnit Best Practices Guide&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>理解Java8中的时间API</title>
    <link href="https://hoohack.me/blog/2020-05-23-java-time-api/"/>
    <updated>2020-05-23T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-05-23-java-time-api/</id>
    <content type="html">&lt;p&gt;在Java8之前，在Java开发过程中，如果要操作时间，是使用Date这个类，在Java8中新增了LocalTime、LocalDate和LocalDateTime，日期和时间的处理变得更加方便和容易。用了一段时间，刚开始每次用的时候都要上网查一波才能找到要的答案，后来认真看一下官网的API，发现也不是那么难理解，现在能够通过自己的理解找到自己想要的表达式，在这里做个小小的学习总结。&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E6%96%B0%E7%9A%84%E6%97%B6%E9%97%B4api&quot; tabindex=&quot;-1&quot;&gt;为什么要有新的时间API&lt;/h2&gt;
&lt;p&gt;既然Date类已经存在了那么多年，为什么要花那么大的精力去做这个改动？收益是什么呢？&lt;/p&gt;
&lt;p&gt;首先，因为Date类真的很难用，有很多过于Geek的设计，比如月份是从0开始，0是一月，11是十二月。好吧，我已经知道程序员是从0开始计数了，但是每次用的时候都要做各种转换，特别是跟其他输出端有交互的时候，改错一个地方就凌乱了。在新的API&lt;code&gt;java.time&lt;/code&gt;里，这些都用常量表示了，不会用错，代码看起来也更加清晰。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;在业务代码中，往往有很多种需求，获取某一天的0点，获取下一天的中午时间，将当前时间往前或者往后移动几天，等等这类的需求，这些功能使用Date类配合Calendar要写好多代码，代码简洁性也不够好。&lt;/p&gt;
&lt;p&gt;另外一个，Date里面的很多方法都弃用了，如果新的项目还敢用这些类，那就是给自己埋坑了，还是趁早改了为好。&lt;/p&gt;
&lt;p&gt;旧的时间类&lt;code&gt;java.util.Date&lt;/code&gt;和格式化类&lt;code&gt;SimpleDateFormatter&lt;/code&gt;都是可变类，不是线程安全的，在多线程环境下对共享变量Date进行操作时，需要自己保证线程安全。而新的时间API&lt;code&gt;LocalTime&lt;/code&gt;和&lt;code&gt;LocalDate&lt;/code&gt;和格式化类&lt;code&gt;DateTimeFormatter&lt;/code&gt;都是final类(不可变)且是线程安全的。&lt;/p&gt;
&lt;p&gt;基于上面的这些原因，就没有理由不使用新的时间API了。&lt;/p&gt;
&lt;p&gt;从一个用着习惯了很多年的工具切换到新的工具总是很不习惯，过程是痛苦的，但是结果是美好的。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E6%96%B0%E7%9A%84%E6%97%B6%E9%97%B4api&quot; tabindex=&quot;-1&quot;&gt;怎么理解新的时间API&lt;/h2&gt;
&lt;p&gt;在新的时间API里，有&lt;code&gt;LocalTime&lt;/code&gt;、&lt;code&gt;LocalDate&lt;/code&gt;、&lt;code&gt;LocalDateTime&lt;/code&gt;三个类，&lt;code&gt;LocalTime&lt;/code&gt;只处理时间，无法包含日期，&lt;code&gt;LocalDate&lt;/code&gt;只处理日期，无法包含时间，只有&lt;code&gt;LocalDateTime&lt;/code&gt;能同时处理日期和时间。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;怎么使用？&lt;/h2&gt;
&lt;p&gt;如果理解了三个类的区别，那么在使用上，需要根据具体情况来处理，下面看看比较常遇到的场景。&lt;/p&gt;
&lt;h3 id=&quot;localdate&quot; tabindex=&quot;-1&quot;&gt;LocalDate&lt;/h3&gt;
&lt;p&gt;只取日期，年月日。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取今天的日期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalDate today = LocalDate.now();// 2020-05-20&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用年月日构造一个日期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalDate valentineDay = LocalDate.of(2020, 5, 20); // 月份和日期是从1开始&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指定对象，获取年、月、日、星期几&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Month&lt;/span&gt; month &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; day &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDayOfMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;DayOfWeek&lt;/span&gt; dayOfWeek &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDayOfWeek&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;YEAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; month &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MONTH_OF_YEAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; day &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DAY_OF_MONTH&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; dayOfWeek &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DAY_OF_WEEK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;localtime&quot; tabindex=&quot;-1&quot;&gt;LocalTime&lt;/h3&gt;
&lt;p&gt;获取时间，只会取几点几分几秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化时间对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalTime localTime = LocalTime.now();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用时分秒构造一个对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalTime localTime = LocalTime.of(12, 0, 0);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指定对象，获取时分秒&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt; localTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; hour &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHour&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; minute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMinute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; second &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; hour &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;HOUR_OF_DAY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; minute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MINUTE_OF_HOUR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; second &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ChronoField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SECOND_OF_MINUTE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;localdatetime&quot; tabindex=&quot;-1&quot;&gt;LocalDateTime&lt;/h3&gt;
&lt;p&gt;获取日期+时间，年月日+时分秒，含义等于LocalDate+LocalTime&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建时间对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalDateTime localDateTime = LocalDateTime.now();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用LocalDate结合LocalTime构造时间对象&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; localDateTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; localDateTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;atTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt; localDateTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;atDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;通过LocalDateTime获取LocalDate和LocalTime&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt; localDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocalDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt; localDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; localDateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocalTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;instant&quot; tabindex=&quot;-1&quot;&gt;Instant&lt;/h2&gt;
&lt;p&gt;这个类是表示时间轴上的某一个时刻的时间点。从&lt;strong&gt;1970-01-01 00:00:00&lt;/strong&gt;这个时间开始计算，主要用于获取时间戳，与&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;（精确到毫秒）类似，但是Instant类可以精确到纳秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建Instant对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Instant instant = Instant.now();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用时间戳创建Instant对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Instant instant = Instant.ofEpochSecond(100, 100000);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取秒数和毫秒&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;instant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEpochSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;instant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getEpochMill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E4%B8%BE%E4%BE%8B%E5%AD%90%E5%8A%A0%E6%B7%B1%E5%8D%B0%E8%B1%A1&quot; tabindex=&quot;-1&quot;&gt;举例子加深印象&lt;/h2&gt;
&lt;p&gt;介绍了这几个类的基本API后，再通过实现某些具体的需求来加深印象。&lt;/p&gt;
&lt;h3 id=&quot;%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3&quot; tabindex=&quot;-1&quot;&gt;获取当前时间戳&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 获取当前时间对象-&gt;设置时-&gt;转换成时间戳&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCurrentSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;atZone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;+8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEpochSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E8%8E%B7%E5%8F%96%E5%BD%93%E5%A4%A9%E9%9B%B6%E7%82%B9%2F%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3&quot; tabindex=&quot;-1&quot;&gt;获取当天零点/结束时间的时间戳&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 使用日期和时间构造日期时间对象-&gt;指定时区转换成时间戳&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getTodayStartTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEpochSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;+8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getTodayEndTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEpochSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;+8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E8%8E%B7%E5%8F%96%E5%89%8D%E4%B8%80%E5%A4%A9%E9%9B%B6%E7%82%B9&quot; tabindex=&quot;-1&quot;&gt;获取前一天零点&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 使用日期和时间构造日期时间对象-&gt;修改日期-&gt;指定时区转换成时间戳&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getYesterdayStartTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;minusDays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEpochSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;+8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%A0%B9%E6%8D%AE%E6%97%B6%E9%97%B4%E6%88%B3%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4%E6%88%B3%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%97%B6%E9%97%B4%E5%BD%93%E5%A4%A90%E7%82%B9&quot; tabindex=&quot;-1&quot;&gt;根据时间戳获取时间戳表示的时间当天0点&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 使用时间戳构造日期时间对象-&gt;修改日期-&gt;指定时区转换成时间戳&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDayStartTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;minusDays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEpochSecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;+8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%88%E5%88%9D%E7%AC%AC%E4%B8%80%E5%A4%A9&quot; tabindex=&quot;-1&quot;&gt;判断是否月初第一天&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFirstDayOfMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; ymd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt; localDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ymd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ofPattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;yyyyMMdd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localDate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withDayOfMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/05/understand-java-8-time.png&quot; alt=&quot;理解Java8中的时间API&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Java新的时间API很强大，这里只能举几个自己遇到比较多的场景给大家介绍，所讲的只是最基础最皮毛的东西，要熟练的掌握所有的细节，还是需要去看看API或源码的实现，然后在平时具体的需求场景中慢慢积累。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，请点个赞吧，谢谢&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>【总结】从0到1的项目经历</title>
    <link href="https://hoohack.me/blog/2020-05-16-summary-of-new-project/"/>
    <updated>2020-05-16T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-05-16-summary-of-new-project/</id>
    <content type="html">&lt;p&gt;去年7月底，接到公司安排，需要在一个半月内完成全新app的上线，需求文档与开发并行，由于时间紧迫，以及人力有限，当然就是享受了一次996，经历了之后，发现真是的是一次痛并快乐着的体验。这段时间加班稍微少了一点，趁假期写下这段经历的收获。&lt;/p&gt;
&lt;p&gt;经历了这么一波疯狂加班后，我总结了一些经验，希望能对自己以后的快速且稳定的开发节奏起到辅助作用，也希望能够帮到正在读这篇文章的你。&lt;/p&gt;
&lt;p&gt;注意，以下的所有建议，都是针对于没有按照正常流程走的创新性项目，不一定适用于已经稳定下来，需要按照正常流程开发的项目，当然有一些是可以借鉴的。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/05/work-overtime.jpg&quot; alt=&quot;Photo by Mitchell Luo on Unsplash&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%8F%90%E9%AB%98%E6%B2%9F%E9%80%9A%E6%95%88%E7%8E%87%E6%9C%80%E5%A5%BD%E7%9A%84%E5%8A%9E%E6%B3%95%EF%BC%8C%E5%BD%93%E9%9D%A2%E6%B2%9F%E9%80%9A&quot; tabindex=&quot;-1&quot;&gt;提高沟通效率最好的办法，当面沟通&lt;/h2&gt;
&lt;p&gt;做这种996的快速开发，每个人每天都在争分夺秒，所以时间非常宝贵，遇到不懂的东西，通过即时通讯工具沟通效率是非常非常低的，不管是私聊还是群聊，不能一直等待别人的回复，如果有个很重要的流程阻碍到自己的进度，那么最应该做的事情是拉上相关的人，把所有相关的人集中在会议室中，明确讨论的主题，最后在白板面前画下流程，让大家一起对流程更加熟悉，找出更好的解决方案。每次沟通好方案以后，都要有书面记录通知到每一个参与讨论的人，保证信息的同步。&lt;/p&gt;
&lt;h2 id=&quot;%E6%AF%8F%E5%A4%A9%E9%A2%84%E7%95%99%E4%B8%80%E7%82%B9%E6%97%B6%E9%97%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E5%8F%8A%E6%97%B6mark%E4%B8%8Btodo%E9%A1%B9&quot; tabindex=&quot;-1&quot;&gt;每天预留一点时间总结，及时mark下TODO项&lt;/h2&gt;
&lt;p&gt;在这么紧凑的开发进度下工作，是非常非常容易忘记东西的，当时的做法是每天下班后再留下半小时梳理当天完成的内容，划掉已经完成的工作任务或者优先级不在第一个版本的工作任务，然后当天加了什么功能，发现什么功能遗漏了，都写下来，以便安排第二天需要完成的工作。&lt;/p&gt;
&lt;p&gt;如果实在太疲劳，做不到每天总结，至少每2天或者最低限度是一星期要做一次梳理总结，否则到最后关头才发现这也没做，那也漏了，那真的加班干到si都不能完成了。&lt;/p&gt;
&lt;p&gt;这个习惯现在仍然保持着，现在项目进度稍微没那么赶，每个需求都会这么做，对能按时交付需求已经没有大难度了。&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%8E%E4%BA%A7%E5%93%81%E6%B2%9F%E9%80%9A%EF%BC%8C%E5%81%9A%E5%A5%BD%E5%8F%96%E8%88%8D&quot; tabindex=&quot;-1&quot;&gt;与产品沟通，做好取舍&lt;/h2&gt;
&lt;p&gt;在需求文档还没出完的情况下，开发在加班，产品也在加班，开发进行到一半，产品完成了部分文档，突然来了一个大功能，那么要在短时间内完成全部肯定是不可能的，只能跟产品沟通，看功能是否很重要，如果没有该功能是否影响产品的使用，保下最重要的功能，其他非核心流程的功能，留在下一个版本再迭代。&lt;/p&gt;
&lt;p&gt;这一点最好应该在项目启动时进行，即使需求文档没有出完，但是可以梳理出最核心的功能，大家都朝着同样的目标去干。鱼与熊掌不可兼得，你不能什么都想要。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B9%B3%E6%97%B6%E5%A4%9A%E7%A7%AF%E7%B4%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B9%B6%E5%8F%8A%E6%97%B6%E5%8D%87%E7%BA%A7&quot; tabindex=&quot;-1&quot;&gt;平时多积累项目的通用组件，并及时升级&lt;/h2&gt;
&lt;p&gt;在参与这些全新又紧急的项目，要想要马上就能写下第一行代码，平时一定要积累一些通用的组件、工具类，比如参数校验拦截器、时间函数、异常处理拦截器等等，有了这些，开发起来就如虎添翼了。&lt;/p&gt;
&lt;p&gt;有了自己的项目框架，就不需要重新搭建，只需要关心业务功能的实现，当然，最好是能自己写一个脚本，一键初始化项目。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BF%AB%E7%9A%84%E5%90%8C%E6%97%B6%E5%B0%BD%E9%87%8F%E7%A8%B3&quot; tabindex=&quot;-1&quot;&gt;快的同时尽量稳&lt;/h2&gt;
&lt;p&gt;要求这么快交付的项目，bug多是肯定的，虽然可以允许少量的试错，但是关键的是要保证核心功能是没问题，且不允许出错的，核心功能无法使用对于用户以及产品来说，是无法接受的，会造成用户的流失，大大降低用户留存率。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%8A%E6%97%B6%E4%BC%91%E6%81%AF&quot; tabindex=&quot;-1&quot;&gt;及时休息&lt;/h2&gt;
&lt;p&gt;结束了每一天的忙碌之后，早点休息吧，记得当时差不多周一到周六，每天是9点半开始开发，晚上1点才停止。连续3周之后，到了周日的时候就是一阵头疼，痛一整天，基本上一天都做不了什么，然后又开始新一轮的工作。甚至有一天半夜醒来了，疯狂出冷汗，全身虚弱，而且疯狂地出冷汗，持续了大约10分钟，那一次真的把我吓到了。所以休息好很重要，有时间就休息，不能疯狂工作忘了休息，身体才是奋斗的本钱。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;经历了这一次的从无到有的项目开发，不可否认是很累，虽然中途也有很多挫败感，但也不可否认学到了很多东西，有了很大的成长，后续会慢慢分享这些学到的东西，可以说是自己工作以来成长最快的一段时间，感谢这一次的项目经历，也感谢帮助我的老大和每一个小伙伴。&lt;/p&gt;
&lt;p&gt;最后的最后，当然希望大家遇到的项目都是能按照正常排期进行的，这样的节奏才是正常的，你好我好大家都好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/05/work-life-balance.jpg&quot; alt=&quot;Photo by Jon Tyson on Unsplash&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>使用拦截器统一处理通用检查</title>
    <link href="https://hoohack.me/blog/2020-04-22-common-check-with-interceptor/"/>
    <updated>2020-04-22T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-04-22-common-check-with-interceptor/</id>
    <content type="html">&lt;h2 id=&quot;%E7%B9%81%E7%90%90%E7%9A%84%E6%A3%80%E6%9F%A5&quot; tabindex=&quot;-1&quot;&gt;繁琐的检查&lt;/h2&gt;
&lt;p&gt;在平时的业务开发中，相信大家都有很多这样的代码：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Parameter&lt;/span&gt; parameter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;validateXXX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BizException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ErrCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PAMRM_ERROR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// 真正的逻辑代码&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么，如果代码还有其他通用的校验，而且每加一个接口都要加这些校验逻辑，久而久之，代码会显得较臃肿，看起来会有很多重复的代码，那么有没有办法精简这部分代码呢？有！&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;spring%E7%9A%84handlerinterceptor&quot; tabindex=&quot;-1&quot;&gt;Spring的HandlerInterceptor&lt;/h2&gt;
&lt;p&gt;先上代码&lt;/p&gt;
&lt;h3 id=&quot;%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9A%E4%B9%89&quot; tabindex=&quot;-1&quot;&gt;拦截器定义&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CheckXXXHandlerInterceptor&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; methodCache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IdentityHashMap&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;HandlerMethod&lt;/span&gt; handlerMethod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HandlerMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;        这个是双重判断锁单例&lt;br /&gt;        外层的判断，为了避免在实例已经创建好的情况下再次加锁获取，影响性能；&lt;br /&gt;        里层的判断，考虑在多线程环境下，多个线程同时过掉外层判断，也就是都已经判断变量为空，如果不加一重判断，还是有可能重复创建。&lt;br /&gt;        */&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handlerMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;methodCache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;methodCache&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;methodCache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; check &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CheckXXX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        check &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CheckXXX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaringClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CheckXXX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        check &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaringClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CheckXXX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                    methodCache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; check&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;methodCache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// do check&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%B3%A8%E8%A7%A3%E5%AE%9A%E4%B9%89&quot; tabindex=&quot;-1&quot;&gt;注解定义&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CheckXXX&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8&quot; tabindex=&quot;-1&quot;&gt;注解使用&lt;/h3&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@CheckXXX&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XXXController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Parameter&lt;/span&gt; parameter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// 真正的逻辑代码&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，就能抽离出通用的逻辑，精简通用的代码。那么，这个拦截器是什么时候执行的呢？它的实现原理是什么？&lt;/p&gt;
&lt;h3 id=&quot;%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA&quot; tabindex=&quot;-1&quot;&gt;执行时机&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/Interceptor_UML.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;通过查看自定义拦截器的UML类图关系，可以看出来，其实是实现了HandlerInterceptor的preHandle方法，通过追踪HandlerInterceptor的调用链路，最终是在请求进入分发器，执行&lt;code&gt;doDispatch&lt;/code&gt;方法用的，而处理器是在初始化的时候就加载好。&lt;/p&gt;
&lt;p&gt;整体的流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/Interceptor_Procedure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mappedHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;applyPreHandle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processedRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyPreHandle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;HandlerInterceptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; interceptors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getInterceptors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;interceptors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; interceptors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;HandlerInterceptor&lt;/span&gt; interceptor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; interceptors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;interceptor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function&quot;&gt;triggerAfterCompletion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;interceptorIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拦截器数组interceptors是在Spring容器启动的时候初始化好的，实现原理比较简单，就是取出请求处理器的map，遍历调用注册好的拦截器。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&quot; tabindex=&quot;-1&quot;&gt;实现原理&lt;/h2&gt;
&lt;p&gt;通过拦截器处理通用检查，背后的编程思想其实是AOP，&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&quot;&gt;面向切面编程&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用切面的优点：首先，现在每个关注点都集中于一个地 方，而不是分散到多处代码中;其次，服务模块更简洁，因为它们只包含主要关注点(或核 心功能)的代码，而次要关注点的代码被转移到切面中了。----摘自《Spring实战》&lt;/p&gt;
&lt;p&gt;关于AOP，网上有很多资料解释，看维基百科的描述也很清晰，，笔者就不多赘述了。&lt;/p&gt;
&lt;p&gt;在这个例子里面，每个接口的核心功能是响应为业务功能提供服务，但是每个接口需要的参数检查、安全检查，都统一交给切面完成。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/Interceptor_AOP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;代码和原理比较简单，但是里面包含的知识点却不少，通过追朔源码，能了解细节之余，还能掌握某一类问题的实现方案。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，请点个赞吧，谢谢^_^&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>[总结]MIT-6.824分布式课程-Mapduce实验</title>
    <link href="https://hoohack.me/blog/2020-04-16-summary-about-mapduce-lab/"/>
    <updated>2020-04-16T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-04-16-summary-about-mapduce-lab/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/index.html&quot;&gt;MIT 6.824分布式系统课程&lt;/a&gt;，是一门著名的讲解分布式系统设计原理的课程。通过课程讲解和实验结合来学习分布式系统设计原理，实验和课程安排见&lt;a href=&quot;http://nil.csail.mit.edu/6.824/2020/schedule.html&quot;&gt;课程表&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot; tabindex=&quot;-1&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;我为什么要学习这个课程？之所以会接触到这门课程，是之前在表示对分布式系统感兴趣时一位基友介绍的，由于种种原因并没有开始学。直到最近，开始研究分布式缓存系统的设计才重新开始。有读过笔者之前的文章可能知道，笔者对redis的研究内容比较感兴趣，后面对redis如何做分布式缓存比较感兴趣，于是开始查资料，后来发现&lt;a href=&quot;https://etcd.io/&quot;&gt;etcd&lt;/a&gt;在这方面也很强，在学习etcd过程中又了解到了到了&lt;a href=&quot;https://zh.wikipedia.org/wiki/Raft&quot;&gt;raft协议&lt;/a&gt;，接着就查到了这门课程中有介绍Raft协议的论文以及相关的实验，刚好得知2020年春季的课程有官方版的视频且被热心网友分享到&lt;a href=&quot;https://www.bilibili.com/video/BV1R7411t71W?p=2&quot;&gt;B站&lt;/a&gt;了，再加上完成实验需要用go语言来实现，基于学习分布式系统设计原理和实践go语言的目的，于是就开始学习这门课程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，etcd和redis是完全不一样概念的东西，etcd主要用于分布式锁以及集群核心配置，核心特性是高可用；而Redis是内存型数据库，目的是做分布式缓存，保存数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%87%86%E5%A4%87%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;准备资料&lt;/h2&gt;
&lt;p&gt;学习这门课程，是先阅读了&lt;a href=&quot;http://nil.csail.mit.edu/6.824/2020/index.html&quot;&gt;课程主页&lt;/a&gt;的介绍，接着根据课程表去学习，课程表里说明了先阅读论文后再去上课（或者看视频），要先看论文后再去看视频，否则看视频时教授在讲什么都不知道。&lt;/p&gt;
&lt;p&gt;上课步骤就是：读论文-&amp;gt;看视频-&amp;gt;做实验。&lt;/p&gt;
&lt;h2 id=&quot;mapreduce%E7%AE%80%E4%BB%8B&quot; tabindex=&quot;-1&quot;&gt;MapReduce简介&lt;/h2&gt;
&lt;p&gt;通过学习论文、课程视频以及完成了实验，对MapReduce有了个初步的认识，在这里总结一下我的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MapReduce&lt;/strong&gt;，本质就是一种编程模型，也是一个处理大规模数据集的相关实现。之所以会有这个模型，目的是为了隐藏“并行计算、容错处理、数据分发、负载均衡”，从而实现大数据计算的一种抽象。&lt;/p&gt;
&lt;p&gt;MapReduce的编程模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;map：接收一组输入的key/value键值对，处理后生成一组被称为中间值的key/value键值对集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reduce：输入是map生成的key/value键值对集合，合并中间值集合中相同key的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个处理过程的抽象过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/MapReduce_Abstract.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在分布式系统中，除了程序以外还有很多需要考虑的问题，比如并发、容错处理等等，对于分布式的MapReduce，执行概览看下面这幅经典的流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/MapReduce_Overview.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;从图里可以看到，Map和Reduce程序分布在多台机器，取出分片数据来处理，数据可以被多台机器并行地处理，而如何分发数据及程序的管理由Worker和Master组成。执行的流程大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统会启动一个或多个Master，需要执行任务的机器启动Worker来处理任务。Master主要职责是分配任务给Worker，Master可以随机选择空闲的Worker来分配任务，或者Worker主动向Master请求任务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得map任务的Worker，读取数据分片，生成一组key/value键值对的中间值集合，并将数据写到本地文件，这里每个map任务数据分为R份(Master创建reduce任务的数量)，通过用户定义的分区函数(如hash(key) mod R)决定将key存在哪个文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得reduce任务的Worker，通过远程调用请求数据，数据加载完毕后，对数据进行排序，之后遍历数据，将相同key的数据进行合并，最终输出结果；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当所有的map和reduce任务完成了，整个MapReduce程序就处理完毕了，Worker得到处理后的数据，通常会保存在不同的小文件中，合并这些文件之后就是最重要的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是我对MapReduce论文的理解总结，还有其他的本地化、任务粒度、合并和排序程序、性能等等话题，因为在实验里还没很深的印象，所以这里暂不进行说明。&lt;/p&gt;
&lt;p&gt;另外要重点关注的是容错处理，如果Master中断、Worker程序崩溃，这些情况要怎么处理？论文里提到的解决方案是将处理结果保存在临时文件中，等到任务真正处理完才写到待输出文件里。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%9E%E9%AA%8C%E5%AE%8C%E6%88%90%E4%B9%8B%E8%B7%AF&quot; tabindex=&quot;-1&quot;&gt;实验完成之路&lt;/h2&gt;
&lt;h3 id=&quot;%E6%97%A0%E6%B3%95%E5%85%A5%E6%89%8B&quot; tabindex=&quot;-1&quot;&gt;无法入手&lt;/h3&gt;
&lt;p&gt;读完MapReduce论文后，去看课程的前两节视频，听懂了大部分，然后兴致勃勃开始做实验。代码拉下来之后，发现根本没法下手，对着实验题和代码苦恼了一个晚上，只知道实验1就是要实现一个分布式的MapReduce，但是看代码已经有了map和reduce函数，根本不知道要做什么，感觉还没开始就要结束了。&lt;/p&gt;
&lt;h3 id=&quot;%E5%8F%8D%E5%A4%8D%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;反复学习资料&lt;/h3&gt;
&lt;p&gt;第一次开始做实验失败之后，花了几个晚上将论文反复看了两遍，再回去看视频，在第二次的学习里，印象更加深刻了，再反复看题目的说明，说明里提到每次修改完程序后，&lt;a href=&quot;http://xn--test-mr-yx7nn24yiscfw3a.sh/&quot;&gt;都要执行test-mr.sh&lt;/a&gt;，里面包含了很多测试用例，只要通过了所有测试用例，那么实验就算完成了。于是去看测试用例文件，再结合题目描述，终于知道要做什么了。&lt;/p&gt;
&lt;p&gt;测试先行，阅读test-mr.sh可以发现，里面主要包含了5个测试用例：单词计数mapreduce、索引mapreduce、并行map、并行reduce、程序崩溃。比如单词计数，检查的步骤是先运行mrsequential.go输出一个文件mr-correct-wc.txt，接着启动mrmaster和mrworker，得到结果后合并为mr-wc-all文件，比较两个文件内容一样就说明通过该用例了。那么要完成实验要，可以先看看mrsequential.go里面做了什么，写一个分布式程序去实现mrsequential.go的功能。&lt;/p&gt;
&lt;p&gt;只要完成了以上的5个测试用例，实验就算完成了，而实际上map和reduce程序已经实现好了，那么需要做的是实现论文里提到的master和worker：&lt;/p&gt;
&lt;p&gt;1、如何分配任务？map和reduce任务如何分配？（用例1、用例2）&lt;/p&gt;
&lt;p&gt;2、如何实现并行处理？（用例3、用例4）&lt;/p&gt;
&lt;p&gt;3、怎么判断Worker崩了？Worker失败后，如何恢复，如何处理正在处理中的任务？（用例5）&lt;/p&gt;
&lt;p&gt;4、任务处理完成后，结果如何处理？&lt;/p&gt;
&lt;p&gt;5、Worker和Master之间的通信通过rpc通信，如何维持两者间的状态？&lt;/p&gt;
&lt;p&gt;理清了需求是要做什么以后，接下来就是设计和编码了。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1&quot; tabindex=&quot;-1&quot;&gt;系统设计&lt;/h2&gt;
&lt;p&gt;只要是程序，设计起来都不外乎数据结构和算法，对于这个实验而言，也是如此。&lt;/p&gt;
&lt;h3 id=&quot;%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&quot; tabindex=&quot;-1&quot;&gt;数据结构&lt;/h3&gt;
&lt;p&gt;定义Master和Task的数据结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Master struct {
	nReduce             int
	nMap                int
	mapTasks            []Task
	reduceTasks         []Task
	state               int // MASTER_INIT;MAP_FINISHED;REDUCE_FINISHED
	mapTaskFinishNum    int
	reduceTaskFinishNum int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;type Task struct {
	State          int // TASK_INIT;TASK_PROCESSING;TASK_DONE
	InputFileName  string
	Id             int
	OutputFileName string
	TaskType       int // MAP_TASK;REDUCE_TASK
	NReduce        int
	NMap           int
	StartTime      int64
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E5%9B%BE&quot; tabindex=&quot;-1&quot;&gt;实现流程图&lt;/h3&gt;
&lt;p&gt;根据对论文以及实验题目的理解后，设计Master和Task两个结构体，要实现的功能如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/MapReduce_Procedure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;1、启动Master后，Master状态为INIT，并根据启动参数初始化map任务&lt;/p&gt;
&lt;p&gt;2、启动Worker，请求Master分配一个任务，然后处理任务(map/reduce)&lt;/p&gt;
&lt;p&gt;3、处理完成后通知Master更新任务状态为完成；每次有任务完成时，检查Map/Reduce任务是否全部完成，根据完成进度更新Master状态&lt;/p&gt;
&lt;p&gt;4、所有任务完成后，Master状态为REDUCE_FINISHED&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;崩溃处理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于处理worker崩溃，实验提示里提到，Master不能明显区分出Worker是处理超时还是崩溃了，所以需要设计一个超时时间(如10秒)，如果任务超时了，就认为任务未完成，下一次再重新分配。实现是在Master分配一个任务时，初始化一个开始时间，Master分配任务时，检查进行中任务，如果任务还未完成且超时了，就重新分配该任务给Worker。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;all-pass&quot; tabindex=&quot;-1&quot;&gt;ALL PASS&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/04/MapReduce_AllPass.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;所有测试用例都通过的那一刻，内心有一份小小的激动，仿佛上大学时通过了一道实验题那种感觉。&lt;/p&gt;
&lt;h2 id=&quot;q%26a&quot; tabindex=&quot;-1&quot;&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;分享几点学习中遇到的问题：&lt;/p&gt;
&lt;p&gt;1、学习这个有什么用？&lt;/p&gt;
&lt;p&gt;这个问题比较尖锐了，我的理解就是，如果对分布式系统感兴趣，想通过实践来强化对分布式系统的理解，那么学习这个课程会有帮助。如果不感兴趣的话，那么这篇文章对你没有什么用。&lt;/p&gt;
&lt;p&gt;2、如何开始学习？&lt;/p&gt;
&lt;p&gt;看&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/index.html&quot;&gt;课程主页&lt;/a&gt;，根据课程表安排，先看论文，在看视频，理解个大概后开始做实验，然后再看论文和视频加深理解。&lt;/p&gt;
&lt;p&gt;3、看完了视频，实验程序怎么跑起来？怎么开始写下第一行代码？&lt;/p&gt;
&lt;p&gt;准备一点Go语言的基础，开始做时多看题目的提示，比如提示的第一点说到，让代码跑起来的第一步就是修改mr/worker.go的Worker函数，发一个RPC请求到Master，请求一个任务数据。&lt;/p&gt;
&lt;p&gt;4、论文、课程和题目都是英文版的，看不懂怎么办？&lt;/p&gt;
&lt;p&gt;硬着头皮看，不懂的就去翻译，当然可以看中文版，网上有很多资源。&lt;a href=&quot;https://www.bilibili.com/video/BV1R7411t71W?p=2&quot;&gt;课程视频&lt;/a&gt;有热心网友做了个中文字幕，可以看中文字幕。&lt;/p&gt;
&lt;p&gt;另外，多说一句，还是推荐尽量看英文版的，并没有崇洋媚外的意思，只不过对于程序开发而言，英文能力还是一个必备技能，因为平时查问题的时候都是英文资料比较多，而且读一手的资料是最好的，这篇文章也只不过是我消化完的知识分享，有可能论文和课程里还有很多我看不到但是你看得到的东西。&lt;/p&gt;
&lt;p&gt;5、有代码链接吗？&lt;/p&gt;
&lt;p&gt;程序员名言：talk is cheep, show me the code.但是由于课程强调了尽量不要看别人的实现，也有人放到Github被MIT要求删除过，所以笔者就不共享全部代码了，如果有需要可私下交流。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过学习前两课，完成MapReduce这个实验，对分布式系统有了一个最表面的认识，还谈不上掌握，这只是一个最简单的实验，更重点的课程和实验还在后面，路漫漫其修远兮。&lt;/p&gt;
&lt;p&gt;如果你也在学习，希望这篇文章对你有帮助。欢迎有兴趣的同学来一起学习讨论。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
&lt;p&gt;如果本文对你有帮助，请点个赞吧，谢谢^_^&lt;/p&gt;
&lt;p&gt;更多精彩内容，请关注个人公众号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/qrcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>聊聊服务灾备</title>
    <link href="https://hoohack.me/blog/2020-02-06-talk-about-disaster-recovery/"/>
    <updated>2020-02-06T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2020-02-06-talk-about-disaster-recovery/</id>
    <content type="html">&lt;p&gt;2018年，有半年的时间在做服务灾备，由于当时对这一块的知识掌握得比较零碎，直接上手实践，没有较系统地学习，在后续的工作中，通过不断实践+学习补充这一块的知识，以及反思当时的实践，逐渐明白了要做灾备的原因和这么做的理由。在此写下自己的小小总结。&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E7%81%BE%E5%A4%87%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;为什么要做灾备？&lt;/h2&gt;
&lt;p&gt;当时开始要做灾备的原因，是因为有一次机房A故障了，当时大部分的服务都不可以用：时长上涨、接口失败，原因是：&lt;/p&gt;
&lt;p&gt;1、很多服务都部署到A机房了，导致大部分服务不可用&lt;/p&gt;
&lt;p&gt;2、服务依赖的数据服务（MySQL、Redis）是单点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/02/SinglePointDeploy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;出现的问题表现是：时长上涨和接口失败，导致了页面不可用、服务受损。&lt;/p&gt;
&lt;p&gt;这个问题的根本原因是出现服务单点的情况，没有备用的服务可以切换，导致请求/服务上游一直等待，等待一定时间后，就失败了。&lt;/p&gt;
&lt;p&gt;知道问题的根本原因后，解决问题的核心方向就是解决单点问题，解决单点问题的方案有：服务冗余（多一份可用的服务），做灾备。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%BE%E5%A4%87&quot; tabindex=&quot;-1&quot;&gt;什么是灾备&lt;/h2&gt;
&lt;p&gt;灾备，简单点说，就是生产环境上部署的服务，假如有一个服务（集群）挂了，有另一个地方的同一个服务（集群）可以继续使用。&lt;/p&gt;
&lt;p&gt;灾备分主备和双活两种部署。假设有两个机房A、B。&lt;/p&gt;
&lt;p&gt;主备：大部分流量都会到主集群A上，当A挂了，备点B能承担主集群的角色；&lt;/p&gt;
&lt;p&gt;双活：流量会平均分配到A、B两个机房，两个机房都能正常对外服务。&lt;/p&gt;
&lt;h2 id=&quot;%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E5%90%88%E7%90%86%E7%9A%84%E7%81%BE%E5%A4%87&quot; tabindex=&quot;-1&quot;&gt;如何做一个合理的灾备&lt;/h2&gt;
&lt;p&gt;怎么去做一个合理的灾备呢？&lt;/p&gt;
&lt;p&gt;笔者结合自己的工作经历及理论知识，觉得做灾备主要是以下的几点，如果还有其他遗漏的，还望各位指正。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%80%E3%80%81%E4%B8%9A%E5%8A%A1%E6%A2%B3%E7%90%86&quot; tabindex=&quot;-1&quot;&gt;一、业务梳理&lt;/h3&gt;
&lt;p&gt;个人觉得，对于业务方来说，做一个应用的灾备最重要的一点就是业务梳理。理由如下：&lt;/p&gt;
&lt;p&gt;1、达到需要做灾备的业务，通常都是存活了有一定时间的业务，这些业务都会由于各种因素而有一些在做灾备时觉得不合理的设计，简称历史原因。这些历史原因有：依赖的服务单点；依赖的数据存储系统单点；依赖的服务无法做灾备等等。这些原因，如果没有解决完，那么业务方也无法完成灾备。&lt;/p&gt;
&lt;p&gt;2、不熟悉业务，对里面的逻辑不清楚，就不知道如果服务异常会导致什么问题发生，贸然去做灾备，等到真正有异常时，可能会发现没有达到预期的效果。&lt;/p&gt;
&lt;p&gt;业务梳理，需要检查以下几个要点：&lt;/p&gt;
&lt;p&gt;1、业务有多少个依赖服务？依赖服务是否还有其他的依赖？&lt;/p&gt;
&lt;p&gt;2、依赖服务的灾备情况如何？双活还是单点？&lt;/p&gt;
&lt;p&gt;3、依赖服务是否支持重试？重试失败怎么处理？&lt;/p&gt;
&lt;p&gt;4、业务使用了什么数据存储系统？部署情况如何？纯DB还是有Redis？主从还是多主？是否支持自动切换主库？&lt;/p&gt;
&lt;p&gt;5、业务用到的数据存储系统的灾备情况如何？是否满足灾备？是否支持分布式？&lt;/p&gt;
&lt;p&gt;6、依赖的服务是否可降级？降级是否可以返回默认值？返回默认值对业务是否有损？&lt;/p&gt;
&lt;p&gt;7、依赖服务多次重试依然失败，是否可以熔断？熔断对业务是否有损？&lt;/p&gt;
&lt;p&gt;业务梳理完成之后，再根据对应不满足的点去完成，直到所有情况都考虑完成了或者使用折中的方案来解决。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BA%8C%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&quot; tabindex=&quot;-1&quot;&gt;二、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&quot;&gt;负载均衡&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;负载均衡的意思是将流量负载分布到多台服务器，从而提高程序的性能和可靠性。通过负载均衡技术，可以分发集中的流量，可以解决两种情况：&lt;/p&gt;
&lt;p&gt;1、流量暴涨，所有流量到一台机器，将应用拖垮&lt;/p&gt;
&lt;p&gt;2、其中一个集群的所有应用挂了，可以将流量转发到另一个集群&lt;/p&gt;
&lt;p&gt;注：在笔者实践负载均衡的经历中，使用到最多的就是nginx的负载均衡配置，将多个集群的机器添加到nginx配置的upstream中，nginx会根据配置文件中指定的策略来分发流量。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%89%E3%80%81%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7&quot; tabindex=&quot;-1&quot;&gt;三、服务降级&lt;/h3&gt;
&lt;p&gt;服务降级：简单地说，就是如果服务异常，停掉不重要的服务，只返回部分数据。&lt;/p&gt;
&lt;p&gt;比如说，一个用户信息接口，包含以下三个字段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;id&amp;quot;: 111,
    &amp;quot;nickName&amp;quot;: &amp;quot;hhq&amp;quot;,
    &amp;quot;userLogo&amp;quot;: &amp;quot;https://www.test.com/test.jpg&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果头像暂时获取失败，如果返回默认头像用户可以接受，那么就降级返回默认的头像，这样既不会使得整个接口失败导致无法进行后续的操作，也不会影响用户体验。&lt;/p&gt;
&lt;h3 id=&quot;%E5%9B%9B%E3%80%81%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD&quot; tabindex=&quot;-1&quot;&gt;四、服务熔断&lt;/h3&gt;
&lt;p&gt;熔断：这个概念参考电路的保险丝，如果电力负载过高，达到保险丝熔断，保险丝就会自身熔断切断电源，保护电路安全运行。而互联网中的服务熔断，是指依赖服务由于各种因素变得不可用或者响应过慢，业务方为了整个服务的稳定性，不再继续调用目标服务，直接返回，如果依赖服务恢复了，则恢复调用。&lt;/p&gt;
&lt;p&gt;注意，熔断和降级看似很相似，但却是不一样的概念，应该理解为从属关系：&lt;/p&gt;
&lt;p&gt;1、服务降级有多种降级方式，如限流降级、熔断降级&lt;/p&gt;
&lt;p&gt;2、熔断是降级的其中一种方式&lt;/p&gt;
&lt;p&gt;在熔断降级的实践中，笔者用到最多的是&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;Hystrix&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BA%94%E3%80%81%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0&quot; tabindex=&quot;-1&quot;&gt;五、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0&quot;&gt;服务发现&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;服务发现：自动检测一个计算机网络内的设备机器提供的服务。&lt;/p&gt;
&lt;p&gt;服务发现有一个服务中间者维护服务与业务方之间的关系，服务将地址注册到服务中间者，业务方从服务中介中查找需要调用的服务的地址。&lt;/p&gt;
&lt;p&gt;上面提到，最初开始做灾备是通过nginx的负载均衡来实现，这种方式在服务部署和扩容时需要修改配置文件，需要自己维护网络中的机器，一旦不小心配置错误，整个服务就崩了。如果使用服务发现，由服务发现的中介维护服务地址，配置时只需要知道服务发现的域名和服务名称即可，不需要关心具体的机器是哪一些。&lt;/p&gt;
&lt;p&gt;实践过程中，用到的服务发现组件有：Zuul和spring-cloud。&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%AD%E3%80%81%E6%BC%94%E7%BB%83&quot; tabindex=&quot;-1&quot;&gt;六、演练&lt;/h3&gt;
&lt;p&gt;如果以上的步骤都完成了，那么就完成灾备了吗？并不是的。&lt;/p&gt;
&lt;p&gt;现实情况下，很多时候是因为出现了单点故障，才会想到要去做灾备。或者其他服务出现了故障，自身的服务也要检查并完成灾备。那么怎么检查自己的服务已经完成灾备了呢？总不可能等待下次的故障到来才去验证。这种情况下，需要多做服务的灾备演练，根据已做的灾备要点，逐步演练，如果发现遗漏点，重新梳理，继续业务灾备，重新演练。不断循环，直到随时演练都能快速恢复并最小地影响业务或者业务完全无感知才算完成了灾备。&lt;/p&gt;
&lt;h2 id=&quot;%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91&quot; tabindex=&quot;-1&quot;&gt;踩过的坑&lt;/h2&gt;
&lt;p&gt;以上的这些理论是多次反复实践得出的总结，以笔者自己做灾备的经历，给大家分享我遇到过的两个比较大的坑。&lt;/p&gt;
&lt;h3 id=&quot;%E7%9C%9F%E7%9A%84%E5%8F%AA%E6%98%AF%E9%87%8D%E8%AF%95%E5%B0%B1%E5%AE%8C%E4%BA%86%E5%90%97%EF%BC%9F%E6%B5%81%E9%87%8F%E6%9A%B4%E6%B6%A8%EF%BC%8C%E6%8B%96%E5%9E%AE%E6%9C%8D%E5%8A%A1&quot; tabindex=&quot;-1&quot;&gt;真的只是重试就完了吗？流量暴涨，拖垮服务&lt;/h3&gt;
&lt;p&gt;接口A，依赖服务B，B依赖服务C，部署情况如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/02/MultiRetryDeploy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;当时做了双活+网关重试+负载均衡的部署，出现的情况是B-&amp;gt;C超时，导致A接口响应太慢，这里B-&amp;gt;C有两次重试，A-&amp;gt;B也有两次重试，接口超时时间太长，网关判断接口失败，于是也做了两次重试，最终的结果是，同一个接口，有&lt;code&gt;2*2*2=8&lt;/code&gt;倍的流量，导致服务C的请求量暴涨，于是将服务C的进程池耗尽，服务499了，最终接口A一直都是失败，直到B-&amp;gt;C之间的网络恢复才正常。&lt;/p&gt;
&lt;p&gt;这次的故障得出的结论是：&lt;/p&gt;
&lt;p&gt;1、重试不能单纯加上就完事了，需要看下游的依赖是否满足重试&lt;/p&gt;
&lt;p&gt;2、重试多次失败后就需要加熔断降级&lt;/p&gt;
&lt;p&gt;3、重要的接口，除了重试以外，还可以做部分数据降级提高接口高可用性&lt;/p&gt;
&lt;h3 id=&quot;%E6%9C%BA%E6%88%BF%E6%9C%8D%E5%8A%A1%E2%80%9C%E5%AD%A4%E5%B2%9B%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;机房服务“孤岛”&lt;/h3&gt;
&lt;p&gt;有接口A，B、C两个服务，A-B之间通过外网相连，B-C之间通过内网相连。异常情况是B-C之间网络不通，外网流量通过接口A进入到B，B依赖C，但是B-C之间不通，B调用C会不断重试，直到全部重试都失败了，才会返回网络错误。这样一来，接口A并不知道B服务失败，用户侧体验是一直等待，然后显示失败。理想的做法是希望能在B-C网络不通的情况下将后续到来的流量拒绝掉，快速响应失败的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hoohack.me/assets/images/2020/02/IsolatedIsland.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;要做到这一点，就需要让服务B“自杀”，如果应用侧发现B-C之间的网络出现异常，就让B返回失败错误码，不再进行重试。&lt;/p&gt;
&lt;h2 id=&quot;%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9&quot; tabindex=&quot;-1&quot;&gt;需要注意的点&lt;/h2&gt;
&lt;h3 id=&quot;%E4%B8%8D%E8%83%BD%E8%84%B1%E7%A6%BB%E4%B8%9A%E5%8A%A1&quot; tabindex=&quot;-1&quot;&gt;不能脱离业务&lt;/h3&gt;
&lt;p&gt;众所周知，开发大部分的时间都需要赶需求，一方面需求多到无法挤出时间完成灾备的任务，另一方面灾备工作如果不完成，出现故障之后就会影响业务了。因此通常会将这类需求当作技术需求来完成，业务开发人员没有时间完成灾备工作时，就会让一些负责技术需求的开发来直接完成灾备。上面提到，完成灾备最重要的一点就是需要梳理业务，如果由一个完成不懂该业务的开发去完成灾备，那么至少需要花1-2天去阅读代码，理清业务逻辑和列出可能出现的坑才能完成这份工作。但是笔者觉得这样做的效率是比较低的。首先，人无完人，虽然代码大家都能看懂，但是由一个未参与过业务的开发重新梳理，难免会有遗漏的地方（即使问相应的业务开发，也有可能会遗漏）；其次，重新熟悉业务也需要投入一定的时间。&lt;/p&gt;
&lt;p&gt;所以，做灾备是不能脱离业务的，应该给业务开发匀出相应的时间完成服务灾备，提高服务稳定性，这对业务而言，出现故障时不影响用户的使用，用户无感知，就是提高用户的体验。&lt;/p&gt;
&lt;h3 id=&quot;%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4&quot; tabindex=&quot;-1&quot;&gt;自动化运维&lt;/h3&gt;
&lt;p&gt;在笔者的灾备经历中，如果机器出现故障/机房故障/流量暴涨，都需要运维和相应的业务开发人工介入判断是否需要扩容或摘除机器。但是人的判读是主观的，对是否需要扩容以及机器的选择可能会有判断出错的时候，灾备的工作，如果能结合现在较成熟k8s进行自动化运维，那么将达到事半功倍的效果。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;灾备，对于服务稳定性而言十分重要，但是也不是一朝一夕能完成的。个人觉得核心要点就是尽最大努力消除单点故障：服务单点、数据系统单点等等。&lt;/p&gt;
&lt;p&gt;以上的文字理论仅仅是笔者经历过的小小总结，也许仍未做到最好的灾备级别，还需要日后不断实践来提升这部分的知识，如果有说错的地方，还望各位指正。&lt;/p&gt;
&lt;p&gt;原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>读书笔记：高性能网站建设</title>
    <link href="https://hoohack.me/blog/2014-12-28-read-high-performance-web-sites/"/>
    <updated>2014-12-28T00:00:00Z</updated>
    <id>https://hoohack.me/blog/2014-12-28-read-high-performance-web-sites/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;第一章  减少HTTP请求&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用图片地图：当导航栏包含多张图片时，可以将其合并成一张图片，再通过计算位置触发不同的链接&lt;/li&gt;
&lt;li&gt;CSS sprites：将图标合并，引入一张背景图，通过CSS控制其位置&lt;/li&gt;
&lt;li&gt;内联图片：将图片编码后再放到data后面。可用PHP的base64_encode对图片文件进行编码。&lt;/li&gt;
&lt;li&gt;合并脚本和样式文件：理想情况下一个页面一个CSS文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第二章  使用CDN(Content Delivery Networks)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF&quot;&gt;CDN&lt;/a&gt;是指内容分发网络
CDN的做法是指将组建分布到其他服务器上
缺点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;响应时间可能会受到其他网站的影响&lt;/li&gt;
&lt;li&gt;无法直接控制组件服务器所带来的特殊麻烦&lt;/li&gt;
&lt;li&gt;工作度量会随CDN性能下降所影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第三章    为组件添加长的Expires头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Expires 属性设置页面在失效前被缓存的时间。如果用户在页面失效前返回同一页面，缓存的版本将显示出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四章  压缩脚本和样式表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过压缩文件从而减少HTTP响应大小来减少响应时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五章  将样式表放在顶部&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将样式表放在页面顶部加载可以保证页面基本内容的呈现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第六章  将脚本文件放在底部&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将脚本放在底部加载可以实现页面的逐步呈现和提高下载的并行度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果脚本使用document.write向页面中插入内容，就不能将其移动到页面中靠后的位置。但是如果一个脚本可以延迟加载，那么它一定可以移到页面底部加载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第七章  避免CSS表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS表达式是动态设置CSS属性的强大（但危险）方法。
如使用CSS表达式可以实现隔一个小时切换一次背景颜色：&lt;/p&gt;
&lt;p&gt;background-color: expression((new Date()).getHours()%2?&amp;quot;#FFFFFF&amp;quot;: &amp;quot;#000000&amp;quot; );&lt;/p&gt;
&lt;p&gt;表达式的问题在于对其进行的求值频率比人们期望的高。它们不只在页面呈现和大小改变时求值，当页面滚动、甚至用户鼠标在页面上移过时都要求值。
如果一定要使用CSS表达式，有两种技术可以避免CSS表达式产生这一问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建一次性表达式&lt;/li&gt;
&lt;li&gt;使用事件处理器取代CSS表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第八章  使用外部的Javascript和CSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的网站的本质上能够为用户带来高完整缓存率，使用外部文件的收益就更大。如果不大可能产生完整缓存，则内联是更好的选择。
如果你的网站中的每个/很多页面都使用了相同的Javascript和CSS，使用外部文件可以提高这些组件的重用率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第九章  减少DNS查找&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Internet是通过IP地址来查找服务器的。由于IP地址很难记忆，通常使用包含主机名的URL来取代它，但当浏览器发送其请求时，IP地址仍然是必需的。这就是&lt;a href=&quot;http://zh.wikipedia.org/zh/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F&quot;&gt;DNS&lt;/a&gt;(Domain Name System)所处的角色。DNS将主机名映射到IP地址上，就像电话本将人名映射到他们的电话号码一样。当你在浏览器中键入github.com时，连接到浏览器的DNS解析器就会返回服务器的IP地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS查找可以被缓存起来以提高性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第十章  精简JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;精简是从代码中移除不必要的字符以减小文件大小，进而改善加载时间的实践。在代码被精简后，所有的注释以及不必要的空白字符(空格、换行和制表符)都将被移除。对于JavaScript而言，这可以改善响应时间效率，因为下载的文件大小减小了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第十一章  避免重定向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重定向用于将用户从一个URL重新路由到另一个URL。
在重定向完毕并且HTML文档下载完毕之前，没有任何东西显示给用户。
重定向会使你的页面变慢&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给URL的结尾添加斜线&amp;quot;/&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第十二章  移除重复脚本&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在页面中多次包含相同的脚本会使页面变慢&lt;/li&gt;
&lt;li&gt;在IE中，如果脚本没有被缓存，或在重新加载页面时，会产生额外的HTTP请求&lt;/li&gt;
&lt;li&gt;在Firefox和IE中，脚本会被多次求值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;第十三章 配置或移除ETag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实体标签(Entity Tag,&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/HTTP_ETag&quot;&gt;ETag&lt;/a&gt;)，是Web服务器和浏览器用于确认缓存组件的有效性的一种机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第十四章  使Ajax可缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;确保Ajax请求遵守性能指导，尤其应具有长久的Expires头。&lt;/p&gt;
</content>
  </entry>
</feed>